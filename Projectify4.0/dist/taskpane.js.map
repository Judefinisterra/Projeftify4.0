{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n\r\n// Mock fs module for browser environment\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true; \r\n\r\n// API keys storage\r\nlet API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\nconst srcPaths = [\r\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\r\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\r\n  'https://localhost:3002/src/prompts/Followup_System.txt',\r\n  'https://localhost:3002/src/prompts/Structure_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\r\n];\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nasync function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys...\");\r\n    \r\n    // Try to load config.js which is .gitignored\r\n    try {\r\n      const configResponse = await fetch('https://localhost:3002/config.js');\r\n      if (configResponse.ok) {\r\n        const configText = await configResponse.text();\r\n        // Extract keys from the config text using regex\r\n        const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        \r\n        if (openaiKeyMatch && openaiKeyMatch[1]) {\r\n          API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n          console.log(\"OpenAI API key loaded from config.js\");\r\n        }\r\n        \r\n        if (pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n          API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n          console.log(\"Pinecone API key loaded from config.js\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Could not load config.js, will use empty API keys:\", error);\r\n    }\r\n    \r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"OPENAI_API_KEY:\", API_KEYS.OPENAI_API_KEY ? \r\n      `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${API_KEYS.OPENAI_API_KEY.substring(API_KEYS.OPENAI_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    console.log(\"PINECONE_API_KEY:\", API_KEYS.PINECONE_API_KEY ? \r\n      `${API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${API_KEYS.PINECONE_API_KEY.substring(API_KEYS.PINECONE_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    \r\n    return API_KEYS.OPENAI_API_KEY && API_KEYS.PINECONE_API_KEY;\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Update Pinecone configuration to handle multiple indexes\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\r\n\r\n// Define configurations for each index\r\nconst PINECONE_INDEXES = {\r\n    codes: {\r\n        name: \"codes\",\r\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2trainingdata: {\r\n        name: \"call2trainingdata\",\r\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2context: {\r\n        name: \"call2context\",\r\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call1context: {\r\n        name: \"call1context\",\r\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    }\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history\r\nfunction saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nfunction loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n            \r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n            \r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function (replaces LangChain)\r\nasync function callOpenAI(messages, model = GPT4O, temperature = 0.7) {\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}`);\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI API response received\");\r\n    \r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function (replaces LangChain)\r\nasync function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n    \r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Remove the PROMPTS object and add a function to load prompts\r\nasync function loadPromptFromFile(promptKey) {\r\n  try {\r\n    // Use a simplified path approach that works with dev server with correct port\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n    ];\r\n    \r\n    // Combine all paths to try\r\n    paths.push(...srcPaths);\r\n \r\n    // Try each path until one works\r\n    let response = null;\r\n    for (const path of paths) {\r\n      console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n    \r\n    if (!response || !response.ok) {\r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n    \r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    throw error; // Re-throw the error to be handled by the caller\r\n  }\r\n}\r\n\r\n// Update the getSystemPromptFromFile function\r\nconst getSystemPromptFromFile = async (promptKey) => {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n//************Functions************\r\n// Function 1: OpenAI Call with conversation history support\r\nasync function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    console.log(\"API Key being used:\", API_KEYS.OPENAI_API_KEY ? `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n    \r\n    // Format messages in the way OpenAI expects\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n    \r\n    // Add conversation history\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            messages.push({ \r\n                role: message[0] === \"human\" ? \"user\" : \"assistant\", \r\n                content: message[1] \r\n            });\r\n        });\r\n    }\r\n    \r\n    // Add current user input\r\n    messages.push({ role: \"user\", content: userInput });\r\n    \r\n    try {\r\n        // Call OpenAI API directly\r\n        const responseContent = await callOpenAI(messages, model, temperature);\r\n        \r\n        // Try to parse JSON response if applicable\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            // If not JSON, treat as text and split by lines\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Function 3: Query Vector Database using Pinecone REST API\r\nasync function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        console.log(\"Generating embeddings for query:\", queryPrompt);\r\n        \r\n        // Generate embeddings using our direct API call\r\n        const embedding = await createEmbedding(queryPrompt);\r\n        console.log(\"Embeddings generated successfully\");\r\n        \r\n        // Get the correct endpoint for the specified index\r\n        const indexConfig = PINECONE_INDEXES[indexName];\r\n        if (!indexConfig) {\r\n            throw new Error(`Invalid index name: ${indexName}`);\r\n        }\r\n        \r\n        const url = `${indexConfig.apiEndpoint}/query`;\r\n        console.log(\"Making Pinecone API request to:\", url);\r\n        \r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': API_KEYS.PINECONE_API_KEY,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\"\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Pinecone API response received\");\r\n        \r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        matches = matches.slice(0, numResults);\r\n\r\n        matches = matches.map(match => {\r\n            try {\r\n                if (match.metadata && match.metadata.text) {\r\n                    return {\r\n                        ...match,\r\n                        text: match.metadata.text\r\n                    };\r\n                }\r\n                return match;\r\n            } catch (error) {\r\n                console.error(\"Error processing match:\", error);\r\n                return match;\r\n            }\r\n        });\r\n\r\n        if (DEBUG) {\r\n            const matchesDescription = matches\r\n                .map((match, i) => `Match ${i + 1} (score: ${match.score.toFixed(4)}): ${match.text || JSON.stringify(match.metadata)}`)\r\n                .join('\\n');\r\n            console.log(matchesDescription);\r\n        }\r\n\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match));\r\n        return cleanMatches.filter(text => text !== \"\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error during vector database query:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n       \r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item.metadata && item.metadata.text) {\r\n                   return item.metadata.text;\r\n               }\r\n           }\r\n           throw new Error(\"No text field found in the JSON array\");\r\n       } \r\n       else if (jsonData.metadata && jsonData.metadata.text) {\r\n           return jsonData.metadata.text;\r\n       } \r\n       else {\r\n           throw new Error(\"Invalid JSON structure: missing metadata.text field\");\r\n       }\r\n   } catch (error) {\r\n       console.error(`Error processing JSON: ${error.message}`);\r\n       return \"\";\r\n   }\r\n}\r\n\r\nfunction safeJsonForPrompt(obj, readable = true) {\r\n    if (!readable) {\r\n        let jsonString = JSON.stringify(obj);\r\n        jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '');\r\n        return jsonString\r\n            .replace(/{/g, '\\\\u007B')\r\n            .replace(/}/g, '\\\\u007D');\r\n    }\r\n    \r\n    if (Array.isArray(obj)) {\r\n        return obj.map(item => {\r\n            if (item.metadata && item.metadata.text) {\r\n                const text = item.metadata.text.replace(/~/g, ',');\r\n                const parts = text.split(';');\r\n                \r\n                let result = '';\r\n                if (parts.length >= 1) result += parts[0].trim();\r\n                if (parts.length >= 2) result += '\\n' + parts[1].trim();\r\n                if (parts.length >= 3) result += '\\n' + parts[2].trim();\r\n                \r\n                if (item.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                \r\n                return result;\r\n            }\r\n            return JSON.stringify(item).replace(/~/g, ',');\r\n        }).join('\\n\\n');\r\n    }\r\n    \r\n    const jsonString = JSON.stringify(obj, null, 2).replace(/~/g, ',');\r\n    return jsonString\r\n        .replace(/{/g, '\\\\u007B')\r\n        .replace(/}/g, '\\\\u007D');\r\n}\r\n\r\nasync function handleFollowUpConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing follow-up question. Loading conversation history...\");\r\n    conversationHistory = loadConversationHistory();\r\n    \r\n    if (conversationHistory.length > 0) {\r\n        if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n        if (DEBUG) console.log(\"Loaded conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n        const MainPrompt = await getSystemPromptFromFile('main');\r\n        \r\n        const trainingdataCall2 = await queryVectorDB({\r\n            queryPrompt: clientprompt,\r\n            similarityThreshold: .4,\r\n            indexName: 'call2trainingdata',\r\n            numResults: 3\r\n        });\r\n\r\n        const call2context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call2context',\r\n            numResults: 5\r\n        });\r\n\r\n        const call1context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call1context',\r\n            numResults: 5\r\n        });\r\n\r\n        const codeOptions = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2 + call1context,\r\n            indexName: 'codes',\r\n            numResults: 10,\r\n            similarityThreshold: .1\r\n        });\r\n        \r\n        const followUpPrompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt + \"\\n\" +\r\n                       \"Training Data: \" + safeJsonForPrompt(trainingdataCall2).replace(/~/g, ',') + \"\\n\" +\r\n                       \"Code choosing context: \" + safeJsonForPrompt(call1context) + \"\\n\" +\r\n                       \"Code editing Context: \" + safeJsonForPrompt(call2context) + \"\\n\" +\r\n                       \"Code descriptions: \" + safeJsonForPrompt(codeOptions);\r\n        \r\n        const response = await processPrompt({\r\n            userInput: followUpPrompt,\r\n            systemPrompt: systemPrompt,\r\n            model: GPT4O,\r\n            temperature: 1,\r\n            history: conversationHistory\r\n        });\r\n        \r\n        conversationHistory.push([\"human\", clientprompt]);\r\n        conversationHistory.push([\"assistant\", response.join(\"\\n\")]);\r\n        \r\n        saveConversationHistory(conversationHistory);\r\n        \r\n        if (DEBUG) console.log(\"Updated conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, call2context, call1context, trainingdataCall2, codeOptions, response);\r\n        saveTrainingData(clientprompt, response);\r\n        \r\n        return response;\r\n    } else {\r\n        if (DEBUG) console.log(\"No conversation history found. Treating as initial question.\");\r\n        return handleInitialConversation(clientprompt);\r\n    }\r\n}\r\n\r\nasync function handleConversation(clientprompt, isFollowUp = false) {\r\n    try {\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        return [\"Error processing your request: \" + error.message];\r\n    }\r\n}\r\n\r\nasync function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n    \r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    console.log(\"SYSTEM PROMPT: \", systemPrompt);\r\n    const MainPrompt = await getSystemPromptFromFile('Encoder_Main');\r\n    console.log(\"MAIN PROMPT: \", MainPrompt);\r\n\r\n\r\n    const Call2prompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt;\r\n    \r\n    const outputArray2 = await processPrompt({\r\n        userInput: Call2prompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT4O,\r\n        temperature: 1 \r\n    });\r\n    \r\n    conversationHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray2.join(\"\\n\")]\r\n    ];\r\n    \r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, [], [], [], [], outputArray2);\r\n    saveTrainingData(clientprompt, outputArray2);\r\n    \r\n    return outputArray2;\r\n}\r\n\r\nasync function structureDatabasequeries(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n    try {\r\n        console.log(\"Getting structure system prompt\");\r\n        const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n        \r\n        if (!systemStructurePrompt) {\r\n            throw new Error(\"Failed to load structure system prompt\");\r\n        }\r\n\r\n        console.log(\"Got system prompt, processing query strings\");\r\n        const queryStrings = await processPrompt({\r\n            userInput: clientprompt,\r\n            systemPrompt: systemStructurePrompt,\r\n            model: GPT4O,\r\n            temperature: 1\r\n        });\r\n\r\n        if (!queryStrings || !Array.isArray(queryStrings)) {\r\n            throw new Error(\"Failed to get valid query strings\");\r\n        }\r\n\r\n        console.log(\"Got query strings:\", queryStrings);\r\n        const results = [];\r\n\r\n        for (const queryString of queryStrings) {\r\n            console.log(\"Processing query:\", queryString);\r\n            try {\r\n                const queryResults = {\r\n                    query: queryString,\r\n                    trainingData: await queryVectorDB({\r\n                        queryPrompt: queryString,\r\n                        similarityThreshold: .4,\r\n                        indexName: 'call2trainingdata',\r\n                        numResults: 3\r\n                    }),\r\n                    call2Context: await queryVectorDB({\r\n                        queryPrompt: queryString,\r\n                        similarityThreshold: .2,\r\n                        indexName: 'call2context',\r\n                        numResults: 5\r\n                    }),\r\n                    call1Context: await queryVectorDB({\r\n                        queryPrompt: queryString,\r\n                        similarityThreshold: .2,\r\n                        indexName: 'call1context',\r\n                        numResults: 5\r\n                    }),\r\n                    codeOptions: await queryVectorDB({\r\n                        queryPrompt: queryString,\r\n                        indexName: 'codes',\r\n                        numResults: 3,\r\n                        similarityThreshold: .1\r\n                    })\r\n                };\r\n\r\n                results.push(queryResults);\r\n                console.log(\"Successfully processed query:\", queryString);\r\n            } catch (error) {\r\n                console.error(`Error processing query \"${queryString}\":`, error);\r\n                // Continue with next query instead of failing completely\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if (results.length === 0) {\r\n            throw new Error(\"No valid results were obtained from any queries\");\r\n        }\r\n\r\n        return results;\r\n    } catch (error) {\r\n        console.error(\"Error in structureDatabasequeries:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray2) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt,\r\n            systemPrompt,\r\n            mainPrompt: MainPrompt,\r\n            validationSystemPrompt,\r\n            validationMainPrompt,\r\n            validationResults,\r\n            call2context,\r\n            call1context,\r\n            trainingdataCall2,\r\n            codeOptions,\r\n            outputArray2\r\n        };\r\n        \r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\nfunction saveTrainingData(clientprompt, outputArray2) {\r\n    try {\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            return text.toString()\r\n                .replace(/\\r?\\n|\\r/g, ' ')\r\n                .trim();\r\n        }\r\n        \r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            response: cleanText(JSON.stringify(outputArray2))\r\n        };\r\n        \r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\nasync function runValidation() {\r\n    try {\r\n        // Instead of running a separate script, we'll do validation in memory\r\n        const validationData = localStorage.getItem('promptAnalysis');\r\n        if (!validationData) {\r\n            return \"No validation data available\";\r\n        }\r\n        \r\n        // Basic validation logic\r\n        const data = JSON.parse(validationData);\r\n        if (!data.outputArray2 || !Array.isArray(data.outputArray2)) {\r\n            return \"Invalid response format\";\r\n        }\r\n        \r\n        return \"Validation successful - no errors found\";\r\n    } catch (error) {\r\n        console.error(\"Error during validation:\", error);\r\n        return \"Validation failed: \" + error.message;\r\n    }\r\n}\r\n\r\nasync function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n        const conversationHistory = loadConversationHistory();\r\n        \r\n        const trainingData = localStorage.getItem('trainingData') || \"\";\r\n        const codeDescriptions = localStorage.getItem('codeDescriptions') || \"\";\r\n        const lastCallContext = localStorage.getItem('lastCallContext') || \"\";\r\n        \r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n        \r\n        if (!validationSystemPrompt) {\r\n            throw new Error(\"Failed to load validation system prompt\");\r\n        }\r\n        \r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        \r\n        const correctionPrompt = \r\n            \"Main Prompt: \" + validationMainPrompt + \"\\n\\n\" +\r\n            \"Original User Input: \" + clientprompt + \"\\n\\n\" +\r\n            \"Initial Response: \" + responseString + \"\\n\\n\" +\r\n            \"Validation Results: \" + validationResults + \"\\n\\n\" +\r\n            \"Training Data: \" + trainingData + \"\\n\\n\" +\r\n            \"Code Descriptions: \" + codeDescriptions + \"\\n\\n\" +\r\n            \"Context from Last Call: \" + lastCallContext;\r\n        \r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(correctionPrompt.substring(0, 500) + \"...(truncated)\");\r\n            console.log(\"=========================================\");\r\n        }\r\n        \r\n        const correctedResponse = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT4O,\r\n            temperature: 0.7\r\n        });\r\n        \r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        fs.writeFileSync(correctionOutputPath, Array.isArray(correctedResponse) ? correctedResponse.join(\"\\n\") : correctedResponse);\r\n        \r\n        if (DEBUG) console.log(`Validation correction saved to ${correctionOutputPath}`);\r\n        \r\n        return correctedResponse;\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        console.error(error.stack);\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showError(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.color = 'red';\r\n    errorDiv.style.padding = '10px';\r\n    errorDiv.style.margin = '10px';\r\n    errorDiv.style.border = '1px solid red';\r\n    errorDiv.style.borderRadius = '4px';\r\n    errorDiv.textContent = `Error: ${message}`;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(errorDiv, appBody.firstChild);\r\n    \r\n    // Remove the error message after 5 seconds\r\n    setTimeout(() => {\r\n        errorDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction setButtonLoading(isLoading) {\r\n    const runButton = document.getElementById('run');\r\n    if (runButton) {\r\n        if (isLoading) {\r\n            runButton.disabled = true;\r\n            runButton.innerHTML = '<span class=\"ms-Button-label\">Processing...</span>';\r\n        } else {\r\n            runButton.disabled = false;\r\n            runButton.innerHTML = '<span class=\"ms-Button-label\">Run</span>';\r\n        }\r\n    }\r\n}\r\n\r\n// Move the run function declaration to module level\r\nexport async function run() {\r\n  console.log(\"Run function started\");\r\n  setButtonLoading(true);\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      console.log(\"Excel.run started\");\r\n      const range = context.workbook.getSelectedRange();\r\n      range.load(\"address\");\r\n      range.load(\"values\");\r\n      await context.sync();\r\n      \r\n      console.log(\"Selected range:\", range.address);\r\n      const selectedText = range.values[0][0];\r\n      console.log(\"Selected text:\", selectedText);\r\n      \r\n      if (!selectedText) {\r\n        throw new Error(\"No text selected in the range\");\r\n      }\r\n      \r\n      // Process the text through the main function\r\n      console.log(\"Starting structureDatabasequeries\");\r\n      const dbResults = await structureDatabasequeries(selectedText);\r\n      console.log(\"Database queries completed\");\r\n      \r\n      if (!dbResults || !Array.isArray(dbResults)) {\r\n        console.error(\"Invalid database results:\", dbResults);\r\n        throw new Error(\"Failed to get valid database results\");\r\n      }\r\n      \r\n      // Format the database results into a string\r\n      const plainTextResults = dbResults.map(result => {\r\n        if (!result) {\r\n          console.error(\"Invalid result in dbResults:\", result);\r\n          return \"No results found\";\r\n        }\r\n        \r\n        return `Query: ${result.query || 'No query'}\\n` +\r\n               `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n               `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n               `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n               `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n               `---\\n`;\r\n      }).join('\\n');\r\n\r\n      // Create an enhanced prompt that includes the database results\r\n      const enhancedPrompt = `Client Request: ${selectedText}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n      console.log(\"Enhanced prompt created\");\r\n\r\n      // Process the conversation with the enhanced prompt\r\n      console.log(\"Starting handleConversation\");\r\n      const response = await handleConversation(enhancedPrompt, false);\r\n      console.log(\"Conversation completed\");\r\n\r\n      if (!response || !Array.isArray(response)) {\r\n        console.error(\"Invalid response:\", response);\r\n        throw new Error(\"Failed to get valid response from conversation\");\r\n      }\r\n\r\n      // // Run validation and correction\r\n      // console.log(\"Starting validation\");\r\n      // const validationResults = await runValidation();\r\n      // console.log(\"Validation completed:\", validationResults);\r\n\r\n      const validationResults = \"Validation successful - no errors found\"\r\n\r\n      let finalResponse;\r\n      if (validationResults && validationResults.includes(\"Validation successful - no errors found\")) {\r\n        finalResponse = response;\r\n      } else {\r\n        console.log(\"Starting validation correction\");\r\n        finalResponse = await validationCorrection(selectedText, response, validationResults);\r\n        console.log(\"Validation correction completed\");\r\n      }\r\n      \r\n      if (!finalResponse || !Array.isArray(finalResponse)) {\r\n        console.error(\"Invalid final response:\", finalResponse);\r\n        throw new Error(\"Failed to get valid final response\");\r\n      }\r\n      \r\n      // Write the final response back to Excel\r\n      console.log(\"Writing response to Excel\");\r\n      range.values = [[finalResponse.join('\\n')]];\r\n      await context.sync();\r\n      console.log(\"Response written to Excel\");\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in run function:\", error);\r\n    console.error(\"Error stack:\", error.stack);\r\n    showError(error.message);\r\n  } finally {\r\n    setButtonLoading(false);\r\n  }\r\n}\r\n\r\n// Update the Office.onReady callback to reference the run function\r\nOffice.onReady(() => {\r\n  console.log(\"Office.onReady called\");\r\n  document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n  document.getElementById(\"app-body\").style.display = \"flex\";\r\n  \r\n  // Initialize API keys before doing anything else\r\n  initializeAPIKeys().then(success => {\r\n    if (success) {\r\n      console.log(\"API keys initialized successfully\");\r\n    } else {\r\n      console.error(\"Failed to initialize API keys\");\r\n      showError(\"Failed to initialize API keys. Some features may not work correctly.\");\r\n    }\r\n\r\n    // Add click handler with visual feedback\r\n    const runButton = document.getElementById(\"run\");\r\n    if (runButton) {\r\n      runButton.onclick = () => {\r\n        console.log(\"Run button clicked\");\r\n        runButton.style.backgroundColor = \"#0078d4\"; // Visual feedback\r\n        setTimeout(() => {\r\n          runButton.style.backgroundColor = \"\"; // Reset color\r\n        }, 200);\r\n        run();\r\n      };\r\n      console.log(\"Run button click handler attached\");\r\n    } else {\r\n      console.error(\"Run button not found in DOM\");\r\n    }\r\n  });\r\n});\r\n\r\n\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su\\\">Welcome</h1> </header> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <h2 class=\\\"ms-font-xl\\\"> Discover what Office Add-ins can do for you today! </h2> <ul class=\\\"ms-List ms-welcome__features\\\"> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Ribbon ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Achieve more with Office integration</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Unlock ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Unlock features and functionality</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Design ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Create and visualize like a pro</span> </li> </ul> <p class=\\\"ms-font-l\\\">Modify the source files, then click <b>Run</b>.</p> <div role=\\\"button\\\" id=\\\"run\\\" class=\\\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\\\"> <span class=\\\"ms-Button-label\\\">Run</span> </div> <p><label id=\\\"item-subject\\\"></label></p> </main> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","API_KEYS","performance","now","OPENAI_API_KEY","PINECONE_API_KEY","srcPaths","_initializeAPIKeys","_callee2","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","_context2","console","log","fetch","ok","text","match","t0","warn","concat","substring","t1","error","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT4O","conversationHistory","saveConversationHistory","history","localStorage","setItem","JSON","stringify","loadConversationHistory","getItem","parsedHistory","parse","Array","isArray","callOpenAI","_x","_callOpenAI","_callee3","messages","model","temperature","response","errorData","data","_args3","_context3","headers","body","json","status","statusText","choices","message","content","createEmbedding","_x2","_createEmbedding","_callee4","_context4","input","embedding","loadPromptFromFile","_x3","_loadPromptFromFile","_callee5","promptKey","paths","_i","_paths","path","_context5","getSystemPromptFromFile","_ref","_callee","prompt","_context","_x4","processPrompt","_x5","_processPrompt","_callee6","_ref2","userInput","systemPrompt","_ref2$history","responseContent","parsed","_context6","role","split","filter","line","trim","queryVectorDB","_x6","_queryVectorDB","_callee7","_ref3","queryPrompt","_ref3$indexName","indexName","_ref3$numResults","numResults","_ref3$similarityThres","similarityThreshold","indexConfig","url","errorText","matches","matchesDescription","cleanMatches","_context7","vector","topK","includeMetadata","namespace","score","map","metadata","_objectSpread","toFixed","join","extractTextFromJson","jsonInput","jsonData","_step","_iterator","_createForOfIteratorHelper","item","err","safeJsonForPrompt","jsonString","parts","result","handleFollowUpConversation","_x7","_handleFollowUpConversation","_callee8","clientprompt","MainPrompt","trainingdataCall2","codeOptions","followUpPrompt","_context8","savePromptAnalysis","saveTrainingData","handleInitialConversation","handleConversation","_x8","_handleConversation","_callee9","isFollowUp","_args9","_context9","_x9","_handleInitialConversation","_callee10","Call2prompt","outputArray2","_context10","structureDatabasequeries","_x10","_structureDatabasequeries","_callee11","systemStructurePrompt","queryStrings","results","_iterator2","_step2","queryString","queryResults","_context11","t2","t3","t4","query","trainingData","call2Context","call1Context","t5","t6","t7","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","mainPrompt","cleanText","toString","validationCorrection","_x11","_x12","_x13","_validationCorrection","_callee13","initialResponse","codeDescriptions","lastCallContext","responseString","correctionPrompt","correctedResponse","_context13","String","stack","showError","errorDiv","createElement","style","color","padding","margin","border","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","setTimeout","remove","setButtonLoading","isLoading","runButton","disabled","innerHTML","_run","_callee15","_context15","Excel","run","_ref4","_callee14","context","range","selectedText","dbResults","plainTextResults","enhancedPrompt","finalResponse","_context14","workbook","getSelectedRange","load","sync","address","includes","_x14","Office","onReady","display","initializeAPIKeys","success","onclick","backgroundColor","URL"],"sourceRoot":""}