{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n\r\n// Mock fs module for browser environment\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true; \r\n\r\n// API keys storage\r\nlet API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nasync function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys...\");\r\n    \r\n    // Try to load config.js which is .gitignored\r\n    try {\r\n      const configResponse = await fetch('https://localhost:3002/config.js');\r\n      if (configResponse.ok) {\r\n        const configText = await configResponse.text();\r\n        // Extract keys from the config text using regex\r\n        const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        \r\n        if (openaiKeyMatch && openaiKeyMatch[1]) {\r\n          API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n          console.log(\"OpenAI API key loaded from config.js\");\r\n        }\r\n        \r\n        if (pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n          API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n          console.log(\"Pinecone API key loaded from config.js\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Could not load config.js, will use empty API keys:\", error);\r\n    }\r\n    \r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"OPENAI_API_KEY:\", API_KEYS.OPENAI_API_KEY ? \r\n      `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${API_KEYS.OPENAI_API_KEY.substring(API_KEYS.OPENAI_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    console.log(\"PINECONE_API_KEY:\", API_KEYS.PINECONE_API_KEY ? \r\n      `${API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${API_KEYS.PINECONE_API_KEY.substring(API_KEYS.PINECONE_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    \r\n    return API_KEYS.OPENAI_API_KEY && API_KEYS.PINECONE_API_KEY;\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\"; \r\nconst PINECONE_INDEX = \"codes\"; \r\n\r\n// Add Pinecone API configuration\r\nconst PINECONE_CONFIG = {\r\n    apiKey: () => API_KEYS.PINECONE_API_KEY, // Use function to get current key\r\n    environment: PINECONE_ENVIRONMENT,\r\n    indexName: PINECONE_INDEX,\r\n    apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history\r\nfunction saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nfunction loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n            \r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n            \r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function (replaces LangChain)\r\nasync function callOpenAI(messages, model = GPT4O, temperature = 0.7) {\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}`);\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI API response received\");\r\n    \r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function (replaces LangChain)\r\nasync function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n    \r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Remove the PROMPTS object and add a function to load prompts\r\nasync function loadPromptFromFile(promptKey) {\r\n  try {\r\n    // Use a simplified path approach that works with dev server with correct port\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n      `https://localhost:3002/assets/prompts/${promptKey}.txt`\r\n    ];\r\n    \r\n    // Try each path until one works\r\n    let response = null;\r\n    for (const path of paths) {\r\n      console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n    \r\n    if (!response || !response.ok) {\r\n      // If all paths fail, use hardcoded fallback prompts\r\n      console.log(`All paths failed, using fallback for: ${promptKey}`);\r\n      const fallbackPrompts = {\r\n        'Structure_System': 'You are an AI assistant specialized in analyzing user queries and breaking them down into search queries for retrieving relevant information from specialized databases. Your task is to generate multiple search queries that will help find the most relevant information for the user\\'s request.\\n\\nWhen given a user query, create 2-5 different search queries that explore different aspects of the question. These queries should be returned as an array of strings.',\r\n        'Followup_System': 'You are an AI assistant helping with follow-up questions related to business analysis. Use the conversation history, training data, and context provided to generate a comprehensive and relevant response.',\r\n        'main': 'You are an AI assistant helping to analyze and respond to business queries. Use the relevant context and training data provided to generate helpful responses.',\r\n        'test-prompt': 'This is a test prompt file used to verify that the prompt loading system is working correctly.',\r\n        'Validation_System': 'You are a validation assistant that checks and corrects responses to business analysis queries. Your task is to carefully analyze the initial response and validation results, then provide an improved version that addresses any issues found.',\r\n        'Validation_Main': 'This is the main validation prompt. Your task is to validate the generated response against the following criteria.',\r\n        'Encoder_System': 'You are an AI assistant specialized in encoding client requests for financial modeling.',\r\n        'Encoder_Main': 'Convert the client request into appropriate response format.'\r\n      };\r\n      \r\n      const fallbackPrompt = fallbackPrompts[promptKey];\r\n      if (fallbackPrompt) {\r\n        console.log(`Using fallback prompt for: ${promptKey}`);\r\n        return fallbackPrompt;\r\n      }\r\n      \r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n    \r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Update the getSystemPromptFromFile function\r\nconst getSystemPromptFromFile = async (promptKey) => {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n//************Functions************\r\n// Function 1: OpenAI Call with conversation history support\r\nasync function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    console.log(\"API Key being used:\", API_KEYS.OPENAI_API_KEY ? `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n    \r\n    // Format messages in the way OpenAI expects\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n    \r\n    // Add conversation history\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            messages.push({ \r\n                role: message[0] === \"human\" ? \"user\" : \"assistant\", \r\n                content: message[1] \r\n            });\r\n        });\r\n    }\r\n    \r\n    // Add current user input\r\n    messages.push({ role: \"user\", content: userInput });\r\n    \r\n    try {\r\n        // Call OpenAI API directly\r\n        const responseContent = await callOpenAI(messages, model, temperature);\r\n        \r\n        // Try to parse JSON response if applicable\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            // If not JSON, treat as text and split by lines\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Function 3: Query Vector Database using Pinecone REST API\r\nasync function queryVectorDB({ queryPrompt, indexName = PINECONE_INDEX, numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        console.log(\"Generating embeddings for query:\", queryPrompt);\r\n        \r\n        // Generate embeddings using our direct API call\r\n        const embedding = await createEmbedding(queryPrompt);\r\n        console.log(\"Embeddings generated successfully\");\r\n        \r\n        const url = `${PINECONE_CONFIG.apiEndpoint}/query`;\r\n        console.log(\"Making Pinecone API request to:\", url);\r\n        \r\n        // Get current API key using the function\r\n        const pineconeAPIKey = PINECONE_CONFIG.apiKey();\r\n        \r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': pineconeAPIKey,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\"\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Pinecone API response received\");\r\n        \r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        matches = matches.slice(0, numResults);\r\n\r\n        matches = matches.map(match => {\r\n            try {\r\n                if (match.metadata && match.metadata.text) {\r\n                    return {\r\n                        ...match,\r\n                        text: match.metadata.text\r\n                    };\r\n                }\r\n                return match;\r\n            } catch (error) {\r\n                console.error(\"Error processing match:\", error);\r\n                return match;\r\n            }\r\n        });\r\n\r\n        if (DEBUG) {\r\n            const matchesDescription = matches\r\n                .map((match, i) => `Match ${i + 1} (score: ${match.score.toFixed(4)}): ${match.text || JSON.stringify(match.metadata)}`)\r\n                .join('\\n');\r\n            console.log(matchesDescription);\r\n        }\r\n\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match));\r\n        return cleanMatches.filter(text => text !== \"\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error during vector database query:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n       \r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item.metadata && item.metadata.text) {\r\n                   return item.metadata.text;\r\n               }\r\n           }\r\n           throw new Error(\"No text field found in the JSON array\");\r\n       } \r\n       else if (jsonData.metadata && jsonData.metadata.text) {\r\n           return jsonData.metadata.text;\r\n       } \r\n       else {\r\n           throw new Error(\"Invalid JSON structure: missing metadata.text field\");\r\n       }\r\n   } catch (error) {\r\n       console.error(`Error processing JSON: ${error.message}`);\r\n       return \"\";\r\n   }\r\n}\r\n\r\nfunction safeJsonForPrompt(obj, readable = true) {\r\n    if (!readable) {\r\n        let jsonString = JSON.stringify(obj);\r\n        jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '');\r\n        return jsonString\r\n            .replace(/{/g, '\\\\u007B')\r\n            .replace(/}/g, '\\\\u007D');\r\n    }\r\n    \r\n    if (Array.isArray(obj)) {\r\n        return obj.map(item => {\r\n            if (item.metadata && item.metadata.text) {\r\n                const text = item.metadata.text.replace(/~/g, ',');\r\n                const parts = text.split(';');\r\n                \r\n                let result = '';\r\n                if (parts.length >= 1) result += parts[0].trim();\r\n                if (parts.length >= 2) result += '\\n' + parts[1].trim();\r\n                if (parts.length >= 3) result += '\\n' + parts[2].trim();\r\n                \r\n                if (item.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                \r\n                return result;\r\n            }\r\n            return JSON.stringify(item).replace(/~/g, ',');\r\n        }).join('\\n\\n');\r\n    }\r\n    \r\n    const jsonString = JSON.stringify(obj, null, 2).replace(/~/g, ',');\r\n    return jsonString\r\n        .replace(/{/g, '\\\\u007B')\r\n        .replace(/}/g, '\\\\u007D');\r\n}\r\n\r\nasync function handleFollowUpConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing follow-up question. Loading conversation history...\");\r\n    conversationHistory = loadConversationHistory();\r\n    \r\n    if (conversationHistory.length > 0) {\r\n        if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n        if (DEBUG) console.log(\"Loaded conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n        const MainPrompt = await getSystemPromptFromFile('main');\r\n        \r\n        const trainingdataCall2 = await queryVectorDB({\r\n            queryPrompt: clientprompt,\r\n            similarityThreshold: .4,\r\n            indexName: 'call2trainingdata',\r\n            numResults: 3\r\n        });\r\n\r\n        const call2context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call2context',\r\n            numResults: 5\r\n        });\r\n\r\n        const call1context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call1context',\r\n            numResults: 5\r\n        });\r\n\r\n        const codeOptions = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2 + call1context,\r\n            indexName: 'codes',\r\n            numResults: 10,\r\n            similarityThreshold: .1\r\n        });\r\n        \r\n        const followUpPrompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt + \"\\n\" +\r\n                       \"Training Data: \" + safeJsonForPrompt(trainingdataCall2).replace(/~/g, ',') + \"\\n\" +\r\n                       \"Code choosing context: \" + safeJsonForPrompt(call1context) + \"\\n\" +\r\n                       \"Code editing Context: \" + safeJsonForPrompt(call2context) + \"\\n\" +\r\n                       \"Code descriptions: \" + safeJsonForPrompt(codeOptions);\r\n        \r\n        const response = await processPrompt({\r\n            userInput: followUpPrompt,\r\n            systemPrompt: systemPrompt,\r\n            model: GPT4O,\r\n            temperature: 1,\r\n            history: conversationHistory\r\n        });\r\n        \r\n        conversationHistory.push([\"human\", clientprompt]);\r\n        conversationHistory.push([\"assistant\", response.join(\"\\n\")]);\r\n        \r\n        saveConversationHistory(conversationHistory);\r\n        \r\n        if (DEBUG) console.log(\"Updated conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, call2context, call1context, trainingdataCall2, codeOptions, response);\r\n        saveTrainingData(clientprompt, response);\r\n        \r\n        return response;\r\n    } else {\r\n        if (DEBUG) console.log(\"No conversation history found. Treating as initial question.\");\r\n        return handleInitialConversation(clientprompt);\r\n    }\r\n}\r\n\r\nasync function handleConversation(clientprompt, isFollowUp = false) {\r\n    try {\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        return [\"Error processing your request: \" + error.message];\r\n    }\r\n}\r\n\r\nasync function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n    \r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    const MainPrompt = await getSystemPromptFromFile('Encoder_Main');\r\n\r\n    const Call2prompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt;\r\n    \r\n    const outputArray2 = await processPrompt({\r\n        userInput: Call2prompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT4O,\r\n        temperature: 1 \r\n    });\r\n    \r\n    conversationHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray2.join(\"\\n\")]\r\n    ];\r\n    \r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, [], [], [], [], outputArray2);\r\n    saveTrainingData(clientprompt, outputArray2);\r\n    \r\n    return outputArray2;\r\n}\r\n\r\nasync function structureDatabasequeries(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n    try {\r\n        console.log(\"Getting structure system prompt\");\r\n        const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n        \r\n        if (!systemStructurePrompt) {\r\n            throw new Error(\"Failed to load structure system prompt\");\r\n        }\r\n\r\n        console.log(\"Got system prompt, processing query strings\");\r\n        const queryStrings = await processPrompt({\r\n            userInput: clientprompt,\r\n            systemPrompt: systemStructurePrompt,\r\n            model: GPT4O,\r\n            temperature: 1\r\n        });\r\n\r\n        if (!queryStrings || !Array.isArray(queryStrings)) {\r\n            throw new Error(\"Failed to get valid query strings\");\r\n        }\r\n\r\n        console.log(\"Got query strings:\", queryStrings);\r\n        const results = [];\r\n\r\n        for (const queryString of queryStrings) {\r\n            console.log(\"Processing query:\", queryString);\r\n            try {\r\n                const queryResults = {\r\n                    query: queryString,\r\n                    trainingData: await queryVectorDB({\r\n                        queryPrompt: queryString,\r\n                        similarityThreshold: .4,\r\n                        indexName: 'call2trainingdata',\r\n                        numResults: 3\r\n                    }),\r\n                    call2Context: await queryVectorDB({\r\n                        queryPrompt: queryString,\r\n                        similarityThreshold: .2,\r\n                        indexName: 'call2context',\r\n                        numResults: 5\r\n                    }),\r\n                    call1Context: await queryVectorDB({\r\n                        queryPrompt: queryString,\r\n                        similarityThreshold: .2,\r\n                        indexName: 'call1context',\r\n                        numResults: 5\r\n                    }),\r\n                    codeOptions: await queryVectorDB({\r\n                        queryPrompt: queryString,\r\n                        indexName: 'codes',\r\n                        numResults: 3,\r\n                        similarityThreshold: .1\r\n                    })\r\n                };\r\n\r\n                results.push(queryResults);\r\n                console.log(\"Successfully processed query:\", queryString);\r\n            } catch (error) {\r\n                console.error(`Error processing query \"${queryString}\":`, error);\r\n                // Continue with next query instead of failing completely\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if (results.length === 0) {\r\n            throw new Error(\"No valid results were obtained from any queries\");\r\n        }\r\n\r\n        return results;\r\n    } catch (error) {\r\n        console.error(\"Error in structureDatabasequeries:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray2) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt,\r\n            systemPrompt,\r\n            mainPrompt: MainPrompt,\r\n            validationSystemPrompt,\r\n            validationMainPrompt,\r\n            validationResults,\r\n            call2context,\r\n            call1context,\r\n            trainingdataCall2,\r\n            codeOptions,\r\n            outputArray2\r\n        };\r\n        \r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\nfunction saveTrainingData(clientprompt, outputArray2) {\r\n    try {\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            return text.toString()\r\n                .replace(/\\r?\\n|\\r/g, ' ')\r\n                .trim();\r\n        }\r\n        \r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            response: cleanText(JSON.stringify(outputArray2))\r\n        };\r\n        \r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\nasync function runValidation() {\r\n    try {\r\n        // Instead of running a separate script, we'll do validation in memory\r\n        const validationData = localStorage.getItem('promptAnalysis');\r\n        if (!validationData) {\r\n            return \"No validation data available\";\r\n        }\r\n        \r\n        // Basic validation logic\r\n        const data = JSON.parse(validationData);\r\n        if (!data.outputArray2 || !Array.isArray(data.outputArray2)) {\r\n            return \"Invalid response format\";\r\n        }\r\n        \r\n        return \"Validation successful - no errors found\";\r\n    } catch (error) {\r\n        console.error(\"Error during validation:\", error);\r\n        return \"Validation failed: \" + error.message;\r\n    }\r\n}\r\n\r\nasync function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n        const conversationHistory = loadConversationHistory();\r\n        \r\n        const trainingData = localStorage.getItem('trainingData') || \"\";\r\n        const codeDescriptions = localStorage.getItem('codeDescriptions') || \"\";\r\n        const lastCallContext = localStorage.getItem('lastCallContext') || \"\";\r\n        \r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n        \r\n        if (!validationSystemPrompt) {\r\n            throw new Error(\"Failed to load validation system prompt\");\r\n        }\r\n        \r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        \r\n        const correctionPrompt = \r\n            \"Main Prompt: \" + validationMainPrompt + \"\\n\\n\" +\r\n            \"Original User Input: \" + clientprompt + \"\\n\\n\" +\r\n            \"Initial Response: \" + responseString + \"\\n\\n\" +\r\n            \"Validation Results: \" + validationResults + \"\\n\\n\" +\r\n            \"Training Data: \" + trainingData + \"\\n\\n\" +\r\n            \"Code Descriptions: \" + codeDescriptions + \"\\n\\n\" +\r\n            \"Context from Last Call: \" + lastCallContext;\r\n        \r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(correctionPrompt.substring(0, 500) + \"...(truncated)\");\r\n            console.log(\"=========================================\");\r\n        }\r\n        \r\n        const correctedResponse = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT4O,\r\n            temperature: 0.7\r\n        });\r\n        \r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        fs.writeFileSync(correctionOutputPath, Array.isArray(correctedResponse) ? correctedResponse.join(\"\\n\") : correctedResponse);\r\n        \r\n        if (DEBUG) console.log(`Validation correction saved to ${correctionOutputPath}`);\r\n        \r\n        return correctedResponse;\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        console.error(error.stack);\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showError(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.color = 'red';\r\n    errorDiv.style.padding = '10px';\r\n    errorDiv.style.margin = '10px';\r\n    errorDiv.style.border = '1px solid red';\r\n    errorDiv.style.borderRadius = '4px';\r\n    errorDiv.textContent = `Error: ${message}`;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(errorDiv, appBody.firstChild);\r\n    \r\n    // Remove the error message after 5 seconds\r\n    setTimeout(() => {\r\n        errorDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction setButtonLoading(isLoading) {\r\n    const runButton = document.getElementById('run');\r\n    if (runButton) {\r\n        if (isLoading) {\r\n            runButton.disabled = true;\r\n            runButton.innerHTML = '<span class=\"ms-Button-label\">Processing...</span>';\r\n        } else {\r\n            runButton.disabled = false;\r\n            runButton.innerHTML = '<span class=\"ms-Button-label\">Run</span>';\r\n        }\r\n    }\r\n}\r\n\r\n// The initialize function must be run each time a new page is loaded\r\nOffice.onReady(() => {\r\n  console.log(\"Office.onReady called\");\r\n  document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n  document.getElementById(\"app-body\").style.display = \"flex\";\r\n  \r\n  // Initialize API keys before doing anything else\r\n  initializeAPIKeys().then(success => {\r\n    if (success) {\r\n      console.log(\"API keys initialized successfully\");\r\n    } else {\r\n      console.error(\"Failed to initialize API keys\");\r\n      showError(\"Failed to initialize API keys. Some features may not work correctly.\");\r\n    }\r\n    \r\n    // Test file loading\r\n    getSystemPromptFromFile(\"test-prompt\")\r\n      .then(text => {\r\n        console.log(\"Test prompt loaded:\", text);\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error loading test prompt:\", error);\r\n      });\r\n  });\r\n  \r\n  // Add click handler with visual feedback\r\n  const runButton = document.getElementById(\"run\");\r\n  if (runButton) {\r\n    runButton.onclick = () => {\r\n      console.log(\"Run button clicked\");\r\n      runButton.style.backgroundColor = \"#0078d4\"; // Visual feedback\r\n      setTimeout(() => {\r\n        runButton.style.backgroundColor = \"\"; // Reset color\r\n      }, 200);\r\n      run();\r\n    };\r\n    console.log(\"Run button click handler attached\");\r\n  } else {\r\n    console.error(\"Run button not found in DOM\");\r\n  }\r\n});\r\n\r\nexport async function run() {\r\n  console.log(\"Run function started\");\r\n  setButtonLoading(true);\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      console.log(\"Excel.run started\");\r\n      const range = context.workbook.getSelectedRange();\r\n      range.load(\"address\");\r\n      range.load(\"values\");\r\n      await context.sync();\r\n      \r\n      console.log(\"Selected range:\", range.address);\r\n      const selectedText = range.values[0][0];\r\n      console.log(\"Selected text:\", selectedText);\r\n      \r\n      if (!selectedText) {\r\n        throw new Error(\"No text selected in the range\");\r\n      }\r\n      \r\n      // Process the text through the main function\r\n      console.log(\"Starting structureDatabasequeries\");\r\n      const dbResults = await structureDatabasequeries(selectedText);\r\n      console.log(\"Database queries completed\");\r\n      \r\n      if (!dbResults || !Array.isArray(dbResults)) {\r\n        console.error(\"Invalid database results:\", dbResults);\r\n        throw new Error(\"Failed to get valid database results\");\r\n      }\r\n      \r\n      // Format the database results into a string\r\n      const plainTextResults = dbResults.map(result => {\r\n        if (!result) {\r\n          console.error(\"Invalid result in dbResults:\", result);\r\n          return \"No results found\";\r\n        }\r\n        \r\n        return `Query: ${result.query || 'No query'}\\n` +\r\n               `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n               `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n               `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n               `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n               `---\\n`;\r\n      }).join('\\n');\r\n\r\n      // Create an enhanced prompt that includes the database results\r\n      const enhancedPrompt = `Client Request: ${selectedText}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n      console.log(\"Enhanced prompt created\");\r\n\r\n      // Process the conversation with the enhanced prompt\r\n      console.log(\"Starting handleConversation\");\r\n      const response = await handleConversation(enhancedPrompt, false);\r\n      console.log(\"Conversation completed\");\r\n\r\n      if (!response || !Array.isArray(response)) {\r\n        console.error(\"Invalid response:\", response);\r\n        throw new Error(\"Failed to get valid response from conversation\");\r\n      }\r\n\r\n      // Run validation and correction\r\n      console.log(\"Starting validation\");\r\n      const validationResults = await runValidation();\r\n      console.log(\"Validation completed:\", validationResults);\r\n\r\n      let finalResponse;\r\n      if (validationResults && validationResults.includes(\"Validation successful - no errors found\")) {\r\n        finalResponse = response;\r\n      } else {\r\n        console.log(\"Starting validation correction\");\r\n        finalResponse = await validationCorrection(selectedText, response, validationResults);\r\n        console.log(\"Validation correction completed\");\r\n      }\r\n      \r\n      if (!finalResponse || !Array.isArray(finalResponse)) {\r\n        console.error(\"Invalid final response:\", finalResponse);\r\n        throw new Error(\"Failed to get valid final response\");\r\n      }\r\n      \r\n      // Write the final response back to Excel\r\n      console.log(\"Writing response to Excel\");\r\n      range.values = [[finalResponse.join('\\n')]];\r\n      await context.sync();\r\n      console.log(\"Response written to Excel\");\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in run function:\", error);\r\n    console.error(\"Error stack:\", error.stack);\r\n    showError(error.message);\r\n  } finally {\r\n    setButtonLoading(false);\r\n  }\r\n}\r\n\r\n\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su\\\">Welcome</h1> </header> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <h2 class=\\\"ms-font-xl\\\"> Discover what Office Add-ins can do for you today! </h2> <ul class=\\\"ms-List ms-welcome__features\\\"> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Ribbon ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Achieve more with Office integration</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Unlock ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Unlock features and functionality</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Design ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Create and visualize like a pro</span> </li> </ul> <p class=\\\"ms-font-l\\\">Modify the source files, then click <b>Run</b>.</p> <div role=\\\"button\\\" id=\\\"run\\\" class=\\\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\\\"> <span class=\\\"ms-Button-label\\\">Run</span> </div> <p><label id=\\\"item-subject\\\"></label></p> </main> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","API_KEYS","performance","now","OPENAI_API_KEY","PINECONE_API_KEY","_initializeAPIKeys","_callee2","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","_context2","console","log","fetch","ok","text","match","t0","warn","concat","substring","t1","error","GPT4O","conversationHistory","saveConversationHistory","history","localStorage","setItem","JSON","stringify","loadConversationHistory","getItem","parsedHistory","parse","Array","isArray","callOpenAI","_x","_callOpenAI","_callee3","messages","model","temperature","response","errorData","data","_args3","_context3","headers","body","json","status","statusText","choices","message","content","createEmbedding","_x2","_createEmbedding","_callee4","_context4","input","embedding","loadPromptFromFile","_x3","_loadPromptFromFile","_callee5","promptKey","paths","_i","_paths","path","fallbackPrompt","_context5","getSystemPromptFromFile","_ref","_callee","prompt","_context","_x4","processPrompt","_x5","_processPrompt","_callee6","_ref2","userInput","systemPrompt","_ref2$history","responseContent","parsed","_context6","role","split","filter","line","trim","queryVectorDB","_x6","_queryVectorDB","_callee7","_ref3","queryPrompt","_ref3$numResults","numResults","_ref3$similarityThres","similarityThreshold","url","pineconeAPIKey","errorText","matches","matchesDescription","cleanMatches","_context7","indexName","vector","topK","includeMetadata","namespace","score","map","metadata","_objectSpread","toFixed","join","extractTextFromJson","jsonInput","jsonData","_step","_iterator","_createForOfIteratorHelper","item","err","safeJsonForPrompt","jsonString","parts","result","handleFollowUpConversation","_x7","_handleFollowUpConversation","_callee8","clientprompt","MainPrompt","trainingdataCall2","call2context","call1context","codeOptions","followUpPrompt","_context8","savePromptAnalysis","saveTrainingData","handleInitialConversation","handleConversation","_x8","_handleConversation","_callee9","isFollowUp","_args9","_context9","_x9","_handleInitialConversation","_callee10","Call2prompt","outputArray2","_context10","structureDatabasequeries","_x10","_structureDatabasequeries","_callee11","systemStructurePrompt","queryStrings","results","_iterator2","_step2","queryString","queryResults","_context11","t2","t3","t4","query","trainingData","call2Context","call1Context","t5","t6","t7","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","mainPrompt","cleanText","toString","runValidation","_runValidation","_callee12","validationData","_context12","validationCorrection","_x11","_x12","_x13","_validationCorrection","_callee13","initialResponse","codeDescriptions","lastCallContext","responseString","correctionPrompt","correctedResponse","_context13","String","stack","showError","errorDiv","createElement","style","color","padding","margin","border","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","setTimeout","remove","setButtonLoading","isLoading","runButton","disabled","innerHTML","_run","_callee15","_context15","Excel","run","_ref4","_callee14","context","range","selectedText","dbResults","plainTextResults","enhancedPrompt","finalResponse","_context14","workbook","getSelectedRange","load","sync","address","includes","_x14","Office","onReady","display","initializeAPIKeys","success","onclick","backgroundColor","URL"],"sourceRoot":""}