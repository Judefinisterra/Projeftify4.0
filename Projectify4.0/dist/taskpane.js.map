{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes\r\n    const vvCodes = new Set();  // codes ending in -VV\r\n    const vrCodes = new Set();  // codes ending in -VR\r\n    const rrCodes = new Set();  // codes ending in -RR\r\n    const rvCodes = new Set();  // codes ending in -RV\r\n    const evCodes = new Set();  // codes ending in -EV\r\n    const erCodes = new Set();  // codes ending in -ER\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    // Extract all potential row IDs including those after asterisks\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            // Add the ID after the asterisk\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            // Add regular IDs\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n\r\n            // Check for suffixes and store them\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships\r\n    // Rule 1: -VV or -VR must have -EV or -RV\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n\r\n    // Rule 2: -RR or -RV must have -ER or -VR\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n// Second pass: detailed validation\r\nfor (const codeString of inputCodeStrings) {\r\n    // Skip BR tags completely\r\n    if (codeString === '<BR>') {\r\n        continue;\r\n    }\r\n    \r\n    const codeMatch = codeString.match(/<([^;]+);/);\r\n    if (!codeMatch) {\r\n        errors.push(`Cannot extract code type from: ${codeString}`);\r\n        continue;\r\n    }\r\n\r\n    const codeType = codeMatch[1].trim();\r\n    \r\n    // Validate code exists in description file\r\n    if (!validCodes.has(codeType)) {\r\n        errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n    }\r\n\r\n\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Convert array of errors to a single string with line breaks\r\n    return errors.join('\\n');\r\n}\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n// Add this test function\r\nimport { validateCodeStrings } from './Validation.js';\r\n// Mock fs module for browser environment\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true; \r\n\r\n// API keys storage\r\nlet API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\nconst srcPaths = [\r\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\r\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\r\n  'https://localhost:3002/src/prompts/Followup_System.txt',\r\n  'https://localhost:3002/src/prompts/Structure_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\r\n];\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nasync function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys...\");\r\n    \r\n    // Try to load config.js which is .gitignored\r\n    try {\r\n      const configResponse = await fetch('https://localhost:3002/config.js');\r\n      if (configResponse.ok) {\r\n        const configText = await configResponse.text();\r\n        // Extract keys from the config text using regex\r\n        const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        \r\n        if (openaiKeyMatch && openaiKeyMatch[1]) {\r\n          API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n          console.log(\"OpenAI API key loaded from config.js\");\r\n        }\r\n        \r\n        if (pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n          API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n          console.log(\"Pinecone API key loaded from config.js\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Could not load config.js, will use empty API keys:\", error);\r\n    }\r\n    \r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"OPENAI_API_KEY:\", API_KEYS.OPENAI_API_KEY ? \r\n      `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${API_KEYS.OPENAI_API_KEY.substring(API_KEYS.OPENAI_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    console.log(\"PINECONE_API_KEY:\", API_KEYS.PINECONE_API_KEY ? \r\n      `${API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${API_KEYS.PINECONE_API_KEY.substring(API_KEYS.PINECONE_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    \r\n    return API_KEYS.OPENAI_API_KEY && API_KEYS.PINECONE_API_KEY;\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Update Pinecone configuration to handle multiple indexes\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\r\n\r\n// Define configurations for each index\r\nconst PINECONE_INDEXES = {\r\n    codes: {\r\n        name: \"codes\",\r\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2trainingdata: {\r\n        name: \"call2trainingdata\",\r\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2context: {\r\n        name: \"call2context\",\r\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call1context: {\r\n        name: \"call1context\",\r\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    }\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history\r\nfunction saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nfunction loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n            \r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n            \r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function (replaces LangChain)\r\nasync function callOpenAI(messages, model = GPT4O, temperature = 0.7) {\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}`);\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI API response received\");\r\n    \r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function (replaces LangChain)\r\nasync function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n    \r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Remove the PROMPTS object and add a function to load prompts\r\nasync function loadPromptFromFile(promptKey) {\r\n  try {\r\n    // Use a simplified path approach that works with dev server with correct port\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n    ];\r\n    \r\n    // Combine all paths to try\r\n    paths.push(...srcPaths);\r\n \r\n    // Try each path until one works\r\n    let response = null;\r\n    for (const path of paths) {\r\n      console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n    \r\n    if (!response || !response.ok) {\r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n    \r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    throw error; // Re-throw the error to be handled by the caller\r\n  }\r\n}\r\n\r\n// Update the getSystemPromptFromFile function\r\nconst getSystemPromptFromFile = async (promptKey) => {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n//************Functions************\r\n// Function 1: OpenAI Call with conversation history support\r\nasync function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    console.log(\"API Key being used:\", API_KEYS.OPENAI_API_KEY ? `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n    \r\n    // Format messages in the way OpenAI expects\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n    \r\n    // Add conversation history\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            messages.push({ \r\n                role: message[0] === \"human\" ? \"user\" : \"assistant\", \r\n                content: message[1] \r\n            });\r\n        });\r\n    }\r\n    \r\n    // Add current user input\r\n    messages.push({ role: \"user\", content: userInput });\r\n    \r\n    try {\r\n        // Call OpenAI API directly\r\n        const responseContent = await callOpenAI(messages, model, temperature);\r\n        \r\n        // Try to parse JSON response if applicable\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            // If not JSON, treat as text and split by lines\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nasync function structureDatabasequeries(clientprompt) {\r\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n  try {\r\n      console.log(\"Getting structure system prompt\");\r\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n      \r\n      if (!systemStructurePrompt) {\r\n          throw new Error(\"Failed to load structure system prompt\");\r\n      }\r\n\r\n      console.log(\"Got system prompt, processing query strings\");\r\n      const queryStrings = await processPrompt({\r\n          userInput: clientprompt,\r\n          systemPrompt: systemStructurePrompt,\r\n          model: GPT4O,\r\n          temperature: 1\r\n      });\r\n\r\n      if (!queryStrings || !Array.isArray(queryStrings)) {\r\n          throw new Error(\"Failed to get valid query strings\");\r\n      }\r\n\r\n      console.log(\"Got query strings:\", queryStrings);\r\n      const results = [];\r\n\r\n      for (const queryString of queryStrings) {\r\n          console.log(\"Processing query:\", queryString);\r\n          try {\r\n              const queryResults = {\r\n                  query: queryString,\r\n                  trainingData: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2trainingdata',\r\n                      numResults: 3\r\n                  }),\r\n                  call2Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2context',\r\n                      numResults: 5\r\n                  }),\r\n                  call1Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call1context',\r\n                      numResults: 5\r\n                  }),\r\n                  codeOptions: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      indexName: 'codes',\r\n                      numResults: 3,\r\n                      similarityThreshold: .1\r\n                  })\r\n              };\r\n\r\n              results.push(queryResults);\r\n              console.log(\"Successfully processed query:\", queryString);\r\n          } catch (error) {\r\n              console.error(`Error processing query \"${queryString}\":`, error);\r\n              // Continue with next query instead of failing completely\r\n              continue;\r\n          }\r\n      }\r\n\r\n      if (results.length === 0) {\r\n          throw new Error(\"No valid results were obtained from any queries\");\r\n      }\r\n\r\n      return results;\r\n  } catch (error) {\r\n      console.error(\"Error in structureDatabasequeries:\", error);\r\n      throw error;\r\n  }\r\n}\r\n\r\n// Function 3: Query Vector Database using Pinecone REST API\r\nasync function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        console.log(\"Generating embeddings for query:\", queryPrompt);\r\n        \r\n        // Generate embeddings using our direct API call\r\n        const embedding = await createEmbedding(queryPrompt);\r\n        console.log(\"Embeddings generated successfully\");\r\n        \r\n        // Get the correct endpoint for the specified index\r\n        const indexConfig = PINECONE_INDEXES[indexName];\r\n        if (!indexConfig) {\r\n            throw new Error(`Invalid index name: ${indexName}`);\r\n        }\r\n        \r\n        const url = `${indexConfig.apiEndpoint}/query`;\r\n        console.log(\"Making Pinecone API request to:\", url);\r\n        \r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': API_KEYS.PINECONE_API_KEY,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\"\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Pinecone API response received\");\r\n        \r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        matches = matches.slice(0, numResults);\r\n\r\n        matches = matches.map(match => {\r\n            try {\r\n                if (match.metadata && match.metadata.text) {\r\n                    return {\r\n                        ...match,\r\n                        text: match.metadata.text\r\n                    };\r\n                }\r\n                return match;\r\n            } catch (error) {\r\n                console.error(\"Error processing match:\", error);\r\n                return match;\r\n            }\r\n        });\r\n\r\n        if (DEBUG) {\r\n            const matchesDescription = matches\r\n                .map((match, i) => `Match ${i + 1} (score: ${match.score.toFixed(4)}): ${match.text || JSON.stringify(match.metadata)}`)\r\n                .join('\\n');\r\n            console.log(matchesDescription);\r\n        }\r\n\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match));\r\n        return cleanMatches.filter(text => text !== \"\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error during vector database query:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n       \r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item.metadata && item.metadata.text) {\r\n                   return item.metadata.text;\r\n               }\r\n           }\r\n           throw new Error(\"No text field found in the JSON array\");\r\n       } \r\n       else if (jsonData.metadata && jsonData.metadata.text) {\r\n           return jsonData.metadata.text;\r\n       } \r\n       else {\r\n           throw new Error(\"Invalid JSON structure: missing metadata.text field\");\r\n       }\r\n   } catch (error) {\r\n       console.error(`Error processing JSON: ${error.message}`);\r\n       return \"\";\r\n   }\r\n}\r\n\r\nfunction safeJsonForPrompt(obj, readable = true) {\r\n    if (!readable) {\r\n        let jsonString = JSON.stringify(obj);\r\n        jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '');\r\n        return jsonString\r\n            .replace(/{/g, '\\\\u007B')\r\n            .replace(/}/g, '\\\\u007D');\r\n    }\r\n    \r\n    if (Array.isArray(obj)) {\r\n        return obj.map(item => {\r\n            if (item.metadata && item.metadata.text) {\r\n                const text = item.metadata.text.replace(/~/g, ',');\r\n                const parts = text.split(';');\r\n                \r\n                let result = '';\r\n                if (parts.length >= 1) result += parts[0].trim();\r\n                if (parts.length >= 2) result += '\\n' + parts[1].trim();\r\n                if (parts.length >= 3) result += '\\n' + parts[2].trim();\r\n                \r\n                if (item.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                \r\n                return result;\r\n            }\r\n            return JSON.stringify(item).replace(/~/g, ',');\r\n        }).join('\\n\\n');\r\n    }\r\n    \r\n    const jsonString = JSON.stringify(obj, null, 2).replace(/~/g, ',');\r\n    return jsonString\r\n        .replace(/{/g, '\\\\u007B')\r\n        .replace(/}/g, '\\\\u007D');\r\n}\r\n\r\nasync function handleFollowUpConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing follow-up question. Loading conversation history...\");\r\n    conversationHistory = loadConversationHistory();\r\n    \r\n    if (conversationHistory.length > 0) {\r\n        if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n        if (DEBUG) console.log(\"Loaded conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n        const MainPrompt = await getSystemPromptFromFile('main');\r\n        \r\n        const trainingdataCall2 = await queryVectorDB({\r\n            queryPrompt: clientprompt,\r\n            similarityThreshold: .4,\r\n            indexName: 'call2trainingdata',\r\n            numResults: 3\r\n        });\r\n\r\n        const call2context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call2context',\r\n            numResults: 5\r\n        });\r\n\r\n        const call1context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call1context',\r\n            numResults: 5\r\n        });\r\n\r\n        const codeOptions = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2 + call1context,\r\n            indexName: 'codes',\r\n            numResults: 10,\r\n            similarityThreshold: .1\r\n        });\r\n        \r\n        const followUpPrompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt + \"\\n\" +\r\n                       \"Training Data: \" + safeJsonForPrompt(trainingdataCall2).replace(/~/g, ',') + \"\\n\" +\r\n                       \"Code choosing context: \" + safeJsonForPrompt(call1context) + \"\\n\" +\r\n                       \"Code editing Context: \" + safeJsonForPrompt(call2context) + \"\\n\" +\r\n                       \"Code descriptions: \" + safeJsonForPrompt(codeOptions);\r\n        \r\n        const response = await processPrompt({\r\n            userInput: followUpPrompt,\r\n            systemPrompt: systemPrompt,\r\n            model: GPT4O,\r\n            temperature: 1,\r\n            history: conversationHistory\r\n        });\r\n        \r\n        conversationHistory.push([\"human\", clientprompt]);\r\n        conversationHistory.push([\"assistant\", response.join(\"\\n\")]);\r\n        \r\n        saveConversationHistory(conversationHistory);\r\n        \r\n        if (DEBUG) console.log(\"Updated conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, call2context, call1context, trainingdataCall2, codeOptions, response);\r\n        saveTrainingData(clientprompt, response);\r\n        \r\n        return response;\r\n    } else {\r\n        if (DEBUG) console.log(\"No conversation history found. Treating as initial question.\");\r\n        return handleInitialConversation(clientprompt);\r\n    }\r\n}\r\n\r\nasync function handleConversation(clientprompt, isFollowUp = false) {\r\n    try {\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        return [\"Error processing your request: \" + error.message];\r\n    }\r\n}\r\n\r\nasync function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n    \r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    console.log(\"SYSTEM PROMPT: \", systemPrompt);\r\n    const MainPrompt = await getSystemPromptFromFile('Encoder_Main');\r\n    console.log(\"MAIN PROMPT: \", MainPrompt);\r\n\r\n\r\n    const Call2prompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt;\r\n    \r\n    const outputArray2 = await processPrompt({\r\n        userInput: Call2prompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT4O,\r\n        temperature: 1 \r\n    });\r\n    \r\n    conversationHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray2.join(\"\\n\")]\r\n    ];\r\n    \r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, [], [], [], [], outputArray2);\r\n    saveTrainingData(clientprompt, outputArray2);\r\n    \r\n    console.log(\"Initial Response - in the function:\", outputArray2);\r\n    return outputArray2;\r\n\r\n}\r\n\r\n\r\n\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray2) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt,\r\n            systemPrompt,\r\n            mainPrompt: MainPrompt,\r\n            validationSystemPrompt,\r\n            validationMainPrompt,\r\n            validationResults,\r\n            call2context,\r\n            call1context,\r\n            trainingdataCall2,\r\n            codeOptions,\r\n            outputArray2\r\n        };\r\n        \r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\nfunction saveTrainingData(clientprompt, outputArray2) {\r\n    try {\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            return text.toString()\r\n                .replace(/\\r?\\n|\\r/g, ' ')\r\n                .trim();\r\n        }\r\n        \r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            response: cleanText(JSON.stringify(outputArray2))\r\n        };\r\n        \r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\nasync function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n        const conversationHistory = loadConversationHistory();\r\n        \r\n        const trainingData = localStorage.getItem('trainingData') || \"\";\r\n        const codeDescriptions = localStorage.getItem('codeDescriptions') || \"\";\r\n        const lastCallContext = localStorage.getItem('lastCallContext') || \"\";\r\n        \r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n        \r\n        if (!validationSystemPrompt) {\r\n            throw new Error(\"Failed to load validation system prompt\");\r\n        }\r\n        \r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        \r\n        const correctionPrompt = \r\n            \"Main Prompt: \" + validationMainPrompt + \"\\n\\n\" +\r\n            \"Original User Input: \" + clientprompt + \"\\n\\n\" +\r\n            \"Initial Response: \" + responseString + \"\\n\\n\" +\r\n            \"Validation Results: \" + validationResults + \"\\n\\n\" +\r\n            \"Training Data: \" + trainingData + \"\\n\\n\" +\r\n            \"Code Descriptions: \" + codeDescriptions + \"\\n\\n\" +\r\n            \"Context from Last Call: \" + lastCallContext;\r\n        \r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(correctionPrompt.substring(0, 500) + \"...(truncated)\");\r\n            console.log(\"=========================================\");\r\n        }\r\n        \r\n        const correctedResponse = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT4O,\r\n            temperature: 0.7\r\n        });\r\n        \r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        fs.writeFileSync(correctionOutputPath, Array.isArray(correctedResponse) ? correctedResponse.join(\"\\n\") : correctedResponse);\r\n        \r\n        if (DEBUG) console.log(`Validation correction saved to ${correctionOutputPath}`);\r\n        \r\n        return correctedResponse;\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        console.error(error.stack);\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showError(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.color = 'red';\r\n    errorDiv.style.padding = '10px';\r\n    errorDiv.style.margin = '10px';\r\n    errorDiv.style.border = '1px solid red';\r\n    errorDiv.style.borderRadius = '4px';\r\n    errorDiv.textContent = `Error: ${message}`;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(errorDiv, appBody.firstChild);\r\n    \r\n    // Remove the error message after 5 seconds\r\n    setTimeout(() => {\r\n        errorDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction setButtonLoading(isLoading) {\r\n    const runButton = document.getElementById('run');\r\n    if (runButton) {\r\n        if (isLoading) {\r\n            runButton.disabled = true;\r\n            runButton.innerHTML = '<span class=\"ms-Button-label\">Processing...</span>';\r\n        } else {\r\n            runButton.disabled = false;\r\n            runButton.innerHTML = '<span class=\"ms-Button-label\">Run</span>';\r\n        }\r\n    }\r\n}\r\n\r\nexport async function run() {\r\n    console.log(\"Run function started\");\r\n    setButtonLoading(true);\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            console.log(\"Excel.run started\");\r\n            const range = context.workbook.getSelectedRange();\r\n            range.load(\"address\");\r\n            range.load(\"values\");\r\n            await context.sync();\r\n            \r\n            console.log(\"Selected range:\", range.address);\r\n            const selectedText = range.values[0][0];\r\n            console.log(\"Selected text:\", selectedText);\r\n            \r\n            if (!selectedText) {\r\n                throw new Error(\"No text selected in the range\");\r\n            }\r\n            \r\n            // Process the text through the main function\r\n            console.log(\"Starting structureDatabasequeries\");\r\n            const dbResults = await structureDatabasequeries(selectedText);\r\n            console.log(\"Database queries completed\");\r\n            \r\n            if (!dbResults || !Array.isArray(dbResults)) {\r\n                console.error(\"Invalid database results:\", dbResults);\r\n                throw new Error(\"Failed to get valid database results\");\r\n            }\r\n            \r\n            // Format the database results into a string\r\n            const plainTextResults = dbResults.map(result => {\r\n                if (!result) return \"No results found\";\r\n                \r\n                return `Query: ${result.query || 'No query'}\\n` +\r\n                       `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n                       `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n                       `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n                       `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n                       `---\\n`;\r\n            }).join('\\n');\r\n\r\n            const enhancedPrompt = `Client Request: ${selectedText}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n            console.log(\"Enhanced prompt created\");\r\n            console.log(\"Enhanced prompt:\", enhancedPrompt);\r\n\r\n            console.log(\"Starting handleConversation\");\r\n            let response = await handleConversation(enhancedPrompt, false);\r\n            console.log(\"Conversation completed\");\r\n            console.log(\"Initial Response:\", response);\r\n\r\n            if (!response || !Array.isArray(response)) {\r\n                console.error(\"Invalid response:\", response);\r\n                throw new Error(\"Failed to get valid response from conversation\");\r\n            }\r\n\r\n            // Run validation and correction if needed\r\n            console.log(\"Starting validation\");\r\n            const validationResults = await validateCodeStrings(response);\r\n            console.log(\"Validation completed:\", validationResults);\r\n\r\n            if (validationResults && validationResults.length > 0) {\r\n                console.log(\"Starting validation correction\");\r\n                response = await validationCorrection(selectedText, response, validationResults);\r\n                console.log(\"Validation correction completed\");\r\n            }\r\n            \r\n            // Split the response into individual code strings\r\n            let codeStrings;\r\n            if (Array.isArray(response)) {\r\n                // Join the array elements and then split by brackets\r\n                const fullText = response.join(' ');\r\n                codeStrings = fullText.match(/<[^>]+>/g) || [];\r\n            } else if (typeof response === 'string') {\r\n                codeStrings = response.match(/<[^>]+>/g) || [];\r\n            } else {\r\n                codeStrings = [];\r\n            }\r\n            \r\n            console.log(\"Extracted code strings:\", codeStrings);\r\n\r\n            if (codeStrings.length === 0) {\r\n                console.warn(\"No valid code strings found in response\");\r\n                throw new Error(\"No valid code strings found in response\");\r\n            }\r\n\r\n            // Clean the strings (remove forward slashes)\r\n            const cleanedStrings = codeStrings.map(str => str.replace(/\\//g, ''));\r\n            \r\n            // Add the original client input as the last item\r\n            cleanedStrings.push(selectedText);\r\n            \r\n            console.log(\"Cleaned code strings with original input:\", cleanedStrings);\r\n\r\n            // Write to Excel\r\n            await writeToExcel(context, range, cleanedStrings);\r\n            \r\n            await context.sync();\r\n            console.log(\"Response written to Excel\");\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error in run function:\", error);\r\n        console.error(\"Error stack:\", error.stack);\r\n        showError(error.message);\r\n    } finally {\r\n        setButtonLoading(false);\r\n    }\r\n}\r\n\r\n// Add this helper function to clean the code strings\r\nfunction cleanCodeString(str) {\r\n    // Extract content between < and >\r\n    const matches = str.match(/<[^>]+>/);\r\n    if (!matches) return str;\r\n    \r\n    // Get the matched content and remove any forward slashes\r\n    return matches[0].replace(/\\//g, '');\r\n}\r\n\r\nasync function writeToExcel(context, startRange, codeStrings) {\r\n    try {\r\n        const worksheet = startRange.worksheet;\r\n        \r\n        // Load the row and column indices\r\n        startRange.load(\"rowIndex\");\r\n        startRange.load(\"columnIndex\");\r\n        await context.sync();\r\n        \r\n        const startRow = startRange.rowIndex;\r\n        const startCol = startRange.columnIndex;\r\n        \r\n        // Clean the code strings before writing\r\n        const cleanedStrings = codeStrings.map(str => cleanCodeString(str));\r\n        \r\n        // Create a range that spans all the rows we need\r\n        const targetRange = worksheet.getRangeByIndexes(\r\n            startRow,\r\n            startCol,\r\n            cleanedStrings.length,\r\n            1\r\n        );\r\n        \r\n        // Set all values at once\r\n        targetRange.values = cleanedStrings.map(str => [str]);\r\n        \r\n        // No need for additional context.sync() here as it will be called in the parent function\r\n    } catch (error) {\r\n        console.error(\"Error in writeToExcel:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Update the Office.onReady callback to reference the run function\r\nOffice.onReady(() => {\r\n  console.log(\"Office.onReady called\");\r\n  document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n  document.getElementById(\"app-body\").style.display = \"flex\";\r\n  \r\n  // Initialize API keys before doing anything else\r\n  initializeAPIKeys().then(success => {\r\n    if (success) {\r\n      console.log(\"API keys initialized successfully\");\r\n    } else {\r\n      console.error(\"Failed to initialize API keys\");\r\n      showError(\"Failed to initialize API keys. Some features may not work correctly.\");\r\n    }\r\n\r\n    // Add click handler with visual feedback\r\n    const runButton = document.getElementById(\"run\");\r\n    if (runButton) {\r\n      runButton.onclick = () => {\r\n        console.log(\"Run button clicked\");\r\n        runButton.style.backgroundColor = \"#0078d4\"; // Visual feedback\r\n        setTimeout(() => {\r\n          runButton.style.backgroundColor = \"\"; // Reset color\r\n        }, 200);\r\n        run();\r\n      };\r\n      console.log(\"Run button click handler attached\");\r\n    } else {\r\n      console.error(\"Run button not found in DOM\");\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\nasync function testValidation() {\r\n    // Test cases\r\n    const testCases = [\r\n        // Valid case\r\n        [\r\n            '<TAB; label1=\"Test Tab\">',\r\n            '<CODE-VV; row1=\"123|Description\">',\r\n            '<CODE-EV; row2=\"456|Another Description\">'\r\n        ],\r\n        // Invalid case (missing EV/RV code)\r\n        [\r\n            '<TAB; label1=\"Test Tab\">',\r\n            '<CODE-VV; row1=\"123|Description\">'\r\n        ],\r\n        // Invalid format case\r\n        [\r\n            '<INVALID; row1=\"123\">'\r\n        ]\r\n    ];\r\n\r\n    console.log(\"Starting validation tests...\");\r\n\r\n    for (let i = 0; i < testCases.length; i++) {\r\n        console.log(`\\nTest Case ${i + 1}:`);\r\n        console.log(\"Input:\", testCases[i]);\r\n        \r\n        const errors = await validateCodeStrings(testCases[i]);\r\n        \r\n        if (errors && errors.length > 0) {\r\n            console.log(\"Validation Errors:\");\r\n            errors.forEach(error => console.log(`- ${error}`));\r\n        } else {\r\n            console.log(\"Validation Successful - No errors\");\r\n        }\r\n    }\r\n}\r\n\r\n// Add this to your Office.onReady handler if not already present\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Excel) {\r\n        document.getElementById(\"run-test\").onclick = testValidation;\r\n    }\r\n});\r\n\r\n\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su\\\">Welcome</h1> </header> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <h2 class=\\\"ms-font-xl\\\"> Discover what Office Add-ins can do for you today! </h2> <ul class=\\\"ms-List ms-welcome__features\\\"> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Ribbon ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Achieve more with Office integration</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Unlock ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Unlock features and functionality</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Design ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Create and visualize like a pro</span> </li> </ul> <p class=\\\"ms-font-l\\\">Modify the source files, then click <b>Run</b>.</p> <div role=\\\"button\\\" id=\\\"run\\\" class=\\\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\\\"> <span class=\\\"ms-Button-label\\\">Run</span> </div> <button class=\\\"ms-Button\\\" id=\\\"run-test\\\"> <span class=\\\"ms-Button-label\\\">Test Validation</span> </button> <p><label id=\\\"item-subject\\\"></label></p> </main> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","defineProperty","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","toString","asyncGeneratorStep","validateCodeStrings","_x","_validateCodeStrings","apply","arguments","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","vvCodes","vrCodes","rrCodes","rvCodes","evCodes","erCodes","validCodes","response","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_i","_arr","code","_i2","_arr2","_code","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","Set","map","str","match","console","log","fetch","ok","text","split","line","trim","filter","t0","concat","message","startsWith","endsWith","parts","part","trimmedPart","afterAsterisk","substring","add","t1","size","has","rowContent","t2","driverValue","err","join","_next","_throw","_asyncToGenerator","API_KEYS","performance","now","OPENAI_API_KEY","PINECONE_API_KEY","srcPaths","_initializeAPIKeys","_callee2","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","_context2","warn","error","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT4O","conversationHistory","saveConversationHistory","history","localStorage","setItem","JSON","stringify","loadConversationHistory","getItem","parsedHistory","parse","callOpenAI","_callOpenAI","_callee3","messages","model","temperature","errorData","data","_args3","_context3","headers","body","json","status","statusText","choices","content","createEmbedding","_x2","_createEmbedding","_callee4","_context4","input","embedding","loadPromptFromFile","_x3","_loadPromptFromFile","_callee5","promptKey","paths","_paths","path","_context5","getSystemPromptFromFile","_ref","prompt","_x4","processPrompt","_x5","_processPrompt","_callee6","_ref2","userInput","systemPrompt","_ref2$history","responseContent","parsed","_context6","role","structureDatabasequeries","_x6","_structureDatabasequeries","_callee7","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","_context7","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","t3","t4","query","trainingData","call2Context","call1Context","codeOptions","t5","t6","t7","_x7","_queryVectorDB","_callee8","_ref3","_ref3$indexName","_ref3$numResults","_ref3$similarityThres","indexConfig","url","errorText","matches","matchesDescription","cleanMatches","_context8","vector","topK","includeMetadata","namespace","score","metadata","_objectSpread","toFixed","extractTextFromJson","jsonInput","jsonData","item","safeJsonForPrompt","jsonString","result","handleFollowUpConversation","_x8","_handleFollowUpConversation","_callee9","MainPrompt","trainingdataCall2","followUpPrompt","_context9","savePromptAnalysis","saveTrainingData","handleInitialConversation","handleConversation","_x9","_handleConversation","_callee10","isFollowUp","_args10","_context10","_x10","_handleInitialConversation","_callee11","Call2prompt","outputArray2","_context11","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","mainPrompt","cleanText","validationCorrection","_x11","_x12","_x13","_validationCorrection","_callee12","initialResponse","codeDescriptions","lastCallContext","responseString","correctionPrompt","correctedResponse","_context12","String","stack","showError","errorDiv","createElement","style","color","padding","margin","border","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","setTimeout","remove","setButtonLoading","isLoading","runButton","disabled","innerHTML","_run","_callee14","_context14","Excel","run","_ref4","_callee13","context","range","selectedText","dbResults","plainTextResults","enhancedPrompt","codeStrings","fullText","cleanedStrings","_context13","workbook","getSelectedRange","load","sync","address","writeToExcel","_x17","cleanCodeString","_x14","_x15","_x16","_writeToExcel","_callee15","startRange","worksheet","startRow","startCol","_context15","rowIndex","columnIndex","getRangeByIndexes","testValidation","_testValidation","_callee16","testCases","_context16","Office","onReady","display","initializeAPIKeys","success","onclick","backgroundColor","info","host","HostType","URL"],"sourceRoot":""}