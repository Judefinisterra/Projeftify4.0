{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/SpreadsheetUtils.js","webpack://excel-custom-functions-js/./src/taskpane/CodeCollection.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes\r\n    const vvCodes = new Set();  // codes ending in -VV\r\n    const vrCodes = new Set();  // codes ending in -VR\r\n    const rrCodes = new Set();  // codes ending in -RR\r\n    const rvCodes = new Set();  // codes ending in -RV\r\n    const evCodes = new Set();  // codes ending in -EV\r\n    const erCodes = new Set();  // codes ending in -ER\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    // Extract all potential row IDs including those after asterisks\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            // Add the ID after the asterisk\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            // Add regular IDs\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n\r\n            // Check for suffixes and store them\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships\r\n    // Rule 1: -VV or -VR must have -EV or -RV\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n\r\n    // Rule 2: -RR or -RV must have -ER or -VR\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n// Second pass: detailed validation\r\nfor (const codeString of inputCodeStrings) {\r\n    // Skip BR tags completely\r\n    if (codeString === '<BR>') {\r\n        continue;\r\n    }\r\n    \r\n    const codeMatch = codeString.match(/<([^;]+);/);\r\n    if (!codeMatch) {\r\n        errors.push(`Cannot extract code type from: ${codeString}`);\r\n        continue;\r\n    }\r\n\r\n    const codeType = codeMatch[1].trim();\r\n    \r\n    // Validate code exists in description file\r\n    if (!validCodes.has(codeType)) {\r\n        errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n    }\r\n\r\n\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Convert array of errors to a single string with line breaks\r\n    return errors.join('\\n');\r\n}\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n\r\n","// SpreadsheetUtils.js - Utility functions for spreadsheet operations\r\n\r\n/**\r\n * Inserts worksheets from a base64-encoded Excel file into the current workbook\r\n * @param {string} base64String - Base64-encoded string of the source Excel file\r\n * @param {string[]} [sheetNames] - Optional array of sheet names to insert. If not provided, all sheets will be inserted.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function handleInsertWorksheetsFromBase64(base64String, sheetNames = null) {\r\n    try {\r\n        // Validate base64 string\r\n        if (!base64String || typeof base64String !== 'string') {\r\n            throw new Error(\"Invalid base64 string provided\");\r\n        }\r\n\r\n        // Validate base64 format\r\n        if (!/^[A-Za-z0-9+/]*={0,2}$/.test(base64String)) {\r\n            throw new Error(\"Invalid base64 format\");\r\n        }\r\n\r\n        await Excel.run(async (context) => {\r\n            const workbook = context.workbook;\r\n            \r\n            // Check if we have the required API version\r\n            if (!workbook.insertWorksheetsFromBase64) {\r\n                throw new Error(\"This feature requires Excel API requirement set 1.13 or later\");\r\n            }\r\n            \r\n            // Insert the worksheets with error handling\r\n            try {\r\n                await workbook.insertWorksheetsFromBase64(base64String, {\r\n                    sheetNames: sheetNames\r\n                });\r\n                \r\n                await context.sync();\r\n                console.log(\"Worksheets inserted successfully\");\r\n            } catch (error) {\r\n                console.error(\"Error during worksheet insertion:\", error);\r\n                throw new Error(`Failed to insert worksheets: ${error.message}`);\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error inserting worksheets from base64:\", error);\r\n        throw error;\r\n    }\r\n} ","/**\r\n * CodeCollection.js\r\n * Functions for processing and managing code collections\r\n */\r\n\r\n/**\r\n * Parses code strings and creates a code collection\r\n * @param {string} inputText - The input text containing code strings\r\n * @returns {Array} - An array of code objects with type and parameters\r\n */\r\nexport function populateCodeCollection(inputText) {\r\n    try {\r\n        console.log(\"Processing input text for code collection\");\r\n        \r\n        // Initialize an empty code collection\r\n        const codeCollection = [];\r\n        \r\n        // Split the input text by newlines to process each line\r\n        const lines = inputText.split('\\n');\r\n        \r\n        for (const line of lines) {\r\n            // Skip empty lines\r\n            if (!line.trim()) continue;\r\n            \r\n            // Extract the code type and parameters\r\n            const codeMatch = line.match(/<([^;>]+);(.*?)>/);\r\n            if (!codeMatch) continue;\r\n            \r\n            const codeType = codeMatch[1].trim();\r\n            const paramsString = codeMatch[2].trim();\r\n            \r\n            // Parse parameters\r\n            const params = {};\r\n            const paramMatches = paramsString.matchAll(/(\\w+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            \r\n            for (const match of paramMatches) {\r\n                const paramName = match[1].trim();\r\n                const paramValue = match[2].trim();\r\n                params[paramName] = paramValue;\r\n            }\r\n            \r\n            // Add the code to the collection\r\n            codeCollection.push({\r\n                type: codeType,\r\n                params: params\r\n            });\r\n        }\r\n        \r\n        console.log(`Processed ${codeCollection.length} codes`);\r\n        return codeCollection;\r\n    } catch (error) {\r\n        console.error(\"Error in populateCodeCollection:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Exports a code collection to text format\r\n * @param {Array} codeCollection - The code collection to export\r\n * @returns {string} - A formatted text representation of the code collection\r\n */\r\nexport function exportCodeCollectionToText(codeCollection) {\r\n    try {\r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        let result = \"Code Collection:\\n\";\r\n        result += \"================\\n\\n\";\r\n        \r\n        codeCollection.forEach((code, index) => {\r\n            result += `Code ${index + 1}: ${code.type}\\n`;\r\n            result += \"Parameters:\\n\";\r\n            \r\n            for (const [key, value] of Object.entries(code.params)) {\r\n                result += `  ${key}: ${value}\\n`;\r\n            }\r\n            \r\n            result += \"\\n\";\r\n        });\r\n        \r\n        return result;\r\n    } catch (error) {\r\n        console.error(\"Error in exportCodeCollectionToText:\", error);\r\n        throw error;\r\n    }\r\n} ","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n// Add this test function\r\nimport { validateCodeStrings } from './Validation.js';\r\n// Import the spreadsheet utilities\r\nimport { handleInsertWorksheetsFromBase64 } from './SpreadsheetUtils.js';\r\n// Import code collection functions\r\nimport { populateCodeCollection, exportCodeCollectionToText } from './CodeCollection.js';\r\n// Mock fs module for browser environment\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true; \r\n\r\n// API keys storage\r\nlet API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\nconst srcPaths = [\r\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\r\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\r\n  'https://localhost:3002/src/prompts/Followup_System.txt',\r\n  'https://localhost:3002/src/prompts/Structure_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\r\n];\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nasync function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys...\");\r\n    \r\n    // Try to load config.js which is .gitignored\r\n    try {\r\n      const configResponse = await fetch('https://localhost:3002/config.js');\r\n      if (configResponse.ok) {\r\n        const configText = await configResponse.text();\r\n        // Extract keys from the config text using regex\r\n        const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        \r\n        if (openaiKeyMatch && openaiKeyMatch[1]) {\r\n          API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n          console.log(\"OpenAI API key loaded from config.js\");\r\n        }\r\n        \r\n        if (pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n          API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n          console.log(\"Pinecone API key loaded from config.js\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Could not load config.js, will use empty API keys:\", error);\r\n    }\r\n    \r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"OPENAI_API_KEY:\", API_KEYS.OPENAI_API_KEY ? \r\n      `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${API_KEYS.OPENAI_API_KEY.substring(API_KEYS.OPENAI_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    console.log(\"PINECONE_API_KEY:\", API_KEYS.PINECONE_API_KEY ? \r\n      `${API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${API_KEYS.PINECONE_API_KEY.substring(API_KEYS.PINECONE_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    \r\n    return API_KEYS.OPENAI_API_KEY && API_KEYS.PINECONE_API_KEY;\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Update Pinecone configuration to handle multiple indexes\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\r\n\r\n// Define configurations for each index\r\nconst PINECONE_INDEXES = {\r\n    codes: {\r\n        name: \"codes\",\r\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2trainingdata: {\r\n        name: \"call2trainingdata\",\r\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2context: {\r\n        name: \"call2context\",\r\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call1context: {\r\n        name: \"call1context\",\r\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    }\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history\r\nfunction saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nfunction loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n            \r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n            \r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function (replaces LangChain)\r\nasync function callOpenAI(messages, model = GPT4O, temperature = 0.7) {\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}`);\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI API response received\");\r\n    \r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function (replaces LangChain)\r\nasync function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n    \r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Remove the PROMPTS object and add a function to load prompts\r\nasync function loadPromptFromFile(promptKey) {\r\n  try {\r\n    // Use a simplified path approach that works with dev server with correct port\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n    ];\r\n    \r\n    // Combine all paths to try\r\n    paths.push(...srcPaths);\r\n \r\n    // Try each path until one works\r\n    let response = null;\r\n    for (const path of paths) {\r\n      console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n    \r\n    if (!response || !response.ok) {\r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n    \r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    throw error; // Re-throw the error to be handled by the caller\r\n  }\r\n}\r\n\r\n// Update the getSystemPromptFromFile function\r\nconst getSystemPromptFromFile = async (promptKey) => {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n//************Functions************\r\n// Function 1: OpenAI Call with conversation history support\r\nasync function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    console.log(\"API Key being used:\", API_KEYS.OPENAI_API_KEY ? `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n    \r\n    // Format messages in the way OpenAI expects\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n    \r\n    // Add conversation history\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            messages.push({ \r\n                role: message[0] === \"human\" ? \"user\" : \"assistant\", \r\n                content: message[1] \r\n            });\r\n        });\r\n    }\r\n    \r\n    // Add current user input\r\n    messages.push({ role: \"user\", content: userInput });\r\n    \r\n    try {\r\n        // Call OpenAI API directly\r\n        const responseContent = await callOpenAI(messages, model, temperature);\r\n        \r\n        // Try to parse JSON response if applicable\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            // If not JSON, treat as text and split by lines\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nasync function structureDatabasequeries(clientprompt) {\r\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n  try {\r\n      console.log(\"Getting structure system prompt\");\r\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n      \r\n      if (!systemStructurePrompt) {\r\n          throw new Error(\"Failed to load structure system prompt\");\r\n      }\r\n\r\n      console.log(\"Got system prompt, processing query strings\");\r\n      const queryStrings = await processPrompt({\r\n          userInput: clientprompt,\r\n          systemPrompt: systemStructurePrompt,\r\n          model: GPT4O,\r\n          temperature: 1\r\n      });\r\n\r\n      if (!queryStrings || !Array.isArray(queryStrings)) {\r\n          throw new Error(\"Failed to get valid query strings\");\r\n      }\r\n\r\n      console.log(\"Got query strings:\", queryStrings);\r\n      const results = [];\r\n\r\n      for (const queryString of queryStrings) {\r\n          console.log(\"Processing query:\", queryString);\r\n          try {\r\n              const queryResults = {\r\n                  query: queryString,\r\n                  trainingData: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2trainingdata',\r\n                      numResults: 3\r\n                  }),\r\n                  call2Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2context',\r\n                      numResults: 5\r\n                  }),\r\n                  call1Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call1context',\r\n                      numResults: 5\r\n                  }),\r\n                  codeOptions: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      indexName: 'codes',\r\n                      numResults: 3,\r\n                      similarityThreshold: .1\r\n                  })\r\n              };\r\n\r\n              results.push(queryResults);\r\n              console.log(\"Successfully processed query:\", queryString);\r\n          } catch (error) {\r\n              console.error(`Error processing query \"${queryString}\":`, error);\r\n              // Continue with next query instead of failing completely\r\n              continue;\r\n          }\r\n      }\r\n\r\n      if (results.length === 0) {\r\n          throw new Error(\"No valid results were obtained from any queries\");\r\n      }\r\n\r\n      return results;\r\n  } catch (error) {\r\n      console.error(\"Error in structureDatabasequeries:\", error);\r\n      throw error;\r\n  }\r\n}\r\n\r\n// Function 3: Query Vector Database using Pinecone REST API\r\nasync function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        console.log(\"Generating embeddings for query:\", queryPrompt);\r\n        \r\n        // Generate embeddings using our direct API call\r\n        const embedding = await createEmbedding(queryPrompt);\r\n        console.log(\"Embeddings generated successfully\");\r\n        \r\n        // Get the correct endpoint for the specified index\r\n        const indexConfig = PINECONE_INDEXES[indexName];\r\n        if (!indexConfig) {\r\n            throw new Error(`Invalid index name: ${indexName}`);\r\n        }\r\n        \r\n        const url = `${indexConfig.apiEndpoint}/query`;\r\n        console.log(\"Making Pinecone API request to:\", url);\r\n        \r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': API_KEYS.PINECONE_API_KEY,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\"\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Pinecone API response received\");\r\n        \r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        matches = matches.slice(0, numResults);\r\n\r\n        matches = matches.map(match => {\r\n            try {\r\n                if (match.metadata && match.metadata.text) {\r\n                    return {\r\n                        ...match,\r\n                        text: match.metadata.text\r\n                    };\r\n                }\r\n                return match;\r\n            } catch (error) {\r\n                console.error(\"Error processing match:\", error);\r\n                return match;\r\n            }\r\n        });\r\n\r\n        if (DEBUG) {\r\n            const matchesDescription = matches\r\n                .map((match, i) => `Match ${i + 1} (score: ${match.score.toFixed(4)}): ${match.text || JSON.stringify(match.metadata)}`)\r\n                .join('\\n');\r\n            console.log(matchesDescription);\r\n        }\r\n\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match));\r\n        return cleanMatches.filter(text => text !== \"\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error during vector database query:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n       \r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item.metadata && item.metadata.text) {\r\n                   return item.metadata.text;\r\n               }\r\n           }\r\n           throw new Error(\"No text field found in the JSON array\");\r\n       } \r\n       else if (jsonData.metadata && jsonData.metadata.text) {\r\n           return jsonData.metadata.text;\r\n       } \r\n       else {\r\n           throw new Error(\"Invalid JSON structure: missing metadata.text field\");\r\n       }\r\n   } catch (error) {\r\n       console.error(`Error processing JSON: ${error.message}`);\r\n       return \"\";\r\n   }\r\n}\r\n\r\nfunction safeJsonForPrompt(obj, readable = true) {\r\n    if (!readable) {\r\n        let jsonString = JSON.stringify(obj);\r\n        jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '');\r\n        return jsonString\r\n            .replace(/{/g, '\\\\u007B')\r\n            .replace(/}/g, '\\\\u007D');\r\n    }\r\n    \r\n    if (Array.isArray(obj)) {\r\n        return obj.map(item => {\r\n            if (item.metadata && item.metadata.text) {\r\n                const text = item.metadata.text.replace(/~/g, ',');\r\n                const parts = text.split(';');\r\n                \r\n                let result = '';\r\n                if (parts.length >= 1) result += parts[0].trim();\r\n                if (parts.length >= 2) result += '\\n' + parts[1].trim();\r\n                if (parts.length >= 3) result += '\\n' + parts[2].trim();\r\n                \r\n                if (item.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                \r\n                return result;\r\n            }\r\n            return JSON.stringify(item).replace(/~/g, ',');\r\n        }).join('\\n\\n');\r\n    }\r\n    \r\n    const jsonString = JSON.stringify(obj, null, 2).replace(/~/g, ',');\r\n    return jsonString\r\n        .replace(/{/g, '\\\\u007B')\r\n        .replace(/}/g, '\\\\u007D');\r\n}\r\n\r\nasync function handleFollowUpConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing follow-up question. Loading conversation history...\");\r\n    conversationHistory = loadConversationHistory();\r\n    \r\n    if (conversationHistory.length > 0) {\r\n        if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n        if (DEBUG) console.log(\"Loaded conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n        // const MainPrompt = await getSystemPromptFromFile('main');\r\n        \r\n        const trainingdataCall2 = await queryVectorDB({\r\n            queryPrompt: clientprompt,\r\n            similarityThreshold: .4,\r\n            indexName: 'call2trainingdata',\r\n            numResults: 3\r\n        });\r\n\r\n        const call2context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call2context',\r\n            numResults: 5\r\n        });\r\n\r\n        const call1context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call1context',\r\n            numResults: 5\r\n        });\r\n\r\n        const codeOptions = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2 + call1context,\r\n            indexName: 'codes',\r\n            numResults: 10,\r\n            similarityThreshold: .1\r\n        });\r\n        \r\n        const followUpPrompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt + \"\\n\" +\r\n                       \"Training Data: \" + safeJsonForPrompt(trainingdataCall2).replace(/~/g, ',') + \"\\n\" +\r\n                       \"Code choosing context: \" + safeJsonForPrompt(call1context) + \"\\n\" +\r\n                       \"Code editing Context: \" + safeJsonForPrompt(call2context) + \"\\n\" +\r\n                       \"Code descriptions: \" + safeJsonForPrompt(codeOptions);\r\n        \r\n        const response = await processPrompt({\r\n            userInput: followUpPrompt,\r\n            systemPrompt: systemPrompt,\r\n            model: GPT4O,\r\n            temperature: 1,\r\n            history: conversationHistory\r\n        });\r\n        \r\n        conversationHistory.push([\"human\", clientprompt]);\r\n        conversationHistory.push([\"assistant\", response.join(\"\\n\")]);\r\n        \r\n        saveConversationHistory(conversationHistory);\r\n        \r\n        if (DEBUG) console.log(\"Updated conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, call2context, call1context, trainingdataCall2, codeOptions, response);\r\n        saveTrainingData(clientprompt, response);\r\n        \r\n        return response;\r\n    } else {\r\n        if (DEBUG) console.log(\"No conversation history found. Treating as initial question.\");\r\n        return handleInitialConversation(clientprompt);\r\n    }\r\n}\r\n\r\nasync function handleConversation(clientprompt, isFollowUp = false) {\r\n    try {\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        return [\"Error processing your request: \" + error.message];\r\n    }\r\n}\r\n\r\nasync function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n    \r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    console.log(\"SYSTEM PROMPT: \", systemPrompt);\r\n    const MainPrompt = await getSystemPromptFromFile('Encoder_Main');\r\n    console.log(\"MAIN PROMPT: \", MainPrompt);\r\n\r\n\r\n    const Call2prompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt;\r\n    \r\n    const outputArray2 = await processPrompt({\r\n        userInput: Call2prompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT4O,\r\n        temperature: 1 \r\n    });\r\n    \r\n    conversationHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray2.join(\"\\n\")]\r\n    ];\r\n    \r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, [], [], [], [], outputArray2);\r\n    saveTrainingData(clientprompt, outputArray2);\r\n    \r\n    console.log(\"Initial Response - in the function:\", outputArray2);\r\n    return outputArray2;\r\n\r\n}\r\n\r\n\r\n\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray2) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt,\r\n            systemPrompt,\r\n            mainPrompt: MainPrompt,\r\n            validationSystemPrompt,\r\n            validationMainPrompt,\r\n            validationResults,\r\n            call2context,\r\n            call1context,\r\n            trainingdataCall2,\r\n            codeOptions,\r\n            outputArray2\r\n        };\r\n        \r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\nfunction saveTrainingData(clientprompt, outputArray2) {\r\n    try {\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            return text.toString()\r\n                .replace(/\\r?\\n|\\r/g, ' ')\r\n                .trim();\r\n        }\r\n        \r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            response: cleanText(JSON.stringify(outputArray2))\r\n        };\r\n        \r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\nasync function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n        const conversationHistory = loadConversationHistory();\r\n        \r\n        const trainingData = localStorage.getItem('trainingData') || \"\";\r\n        const codeDescriptions = localStorage.getItem('codeDescriptions') || \"\";\r\n        const lastCallContext = localStorage.getItem('lastCallContext') || \"\";\r\n        \r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n        \r\n        if (!validationSystemPrompt) {\r\n            throw new Error(\"Failed to load validation system prompt\");\r\n        }\r\n        \r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        \r\n        const correctionPrompt = \r\n            \"Main Prompt: \" + validationMainPrompt + \"\\n\\n\" +\r\n            \"Original User Input: \" + clientprompt + \"\\n\\n\" +\r\n            \"Initial Response: \" + responseString + \"\\n\\n\" +\r\n            \"Validation Results: \" + validationResults + \"\\n\\n\" +\r\n            \"Training Data: \" + trainingData + \"\\n\\n\" +\r\n            \"Code Descriptions: \" + codeDescriptions + \"\\n\\n\" +\r\n            \"Context from Last Call: \" + lastCallContext;\r\n        \r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(correctionPrompt.substring(0, 500) + \"...(truncated)\");\r\n            console.log(\"=========================================\");\r\n        }\r\n        \r\n        const correctedResponse = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT4O,\r\n            temperature: 0.7\r\n        });\r\n        \r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        fs.writeFileSync(correctionOutputPath, Array.isArray(correctedResponse) ? correctedResponse.join(\"\\n\") : correctedResponse);\r\n        \r\n        if (DEBUG) console.log(`Validation correction saved to ${correctionOutputPath}`);\r\n        \r\n        return correctedResponse;\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        console.error(error.stack);\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showError(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.color = 'red';\r\n    errorDiv.style.padding = '10px';\r\n    errorDiv.style.margin = '10px';\r\n    errorDiv.style.border = '1px solid red';\r\n    errorDiv.style.borderRadius = '4px';\r\n    errorDiv.textContent = `Error: ${message}`;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(errorDiv, appBody.firstChild);\r\n    \r\n    // Remove the error message after 5 seconds\r\n    setTimeout(() => {\r\n        errorDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction setButtonLoading(isLoading) {\r\n    const sendButton = document.getElementById('send');\r\n    const loadingAnimation = document.getElementById('loading-animation');\r\n    \r\n    if (sendButton) {\r\n        sendButton.disabled = isLoading;\r\n    }\r\n    \r\n    if (loadingAnimation) {\r\n        loadingAnimation.style.display = isLoading ? 'flex' : 'none';\r\n    }\r\n}\r\n\r\n// Add this variable to store the last response\r\nlet lastResponse = null;\r\n\r\n// Add this variable to track if the current message is a response\r\nlet isResponse = false;\r\n\r\n// Add this function to write to Excel\r\nasync function writeToExcel() {\r\n    if (!lastResponse) {\r\n        showError('No response to write to Excel');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            const range = context.workbook.getSelectedRange();\r\n            range.load(\"rowIndex\");\r\n            range.load(\"columnIndex\");\r\n            await context.sync();\r\n            \r\n            const startRow = range.rowIndex;\r\n            const startCol = range.columnIndex;\r\n            \r\n            // Split the response into individual code strings\r\n            let codeStrings = [];\r\n            if (Array.isArray(lastResponse)) {\r\n                // Join the array elements and then split by brackets\r\n                const fullText = lastResponse.join(' ');\r\n                codeStrings = fullText.match(/<[^>]+>/g) || [];\r\n            } else if (typeof lastResponse === 'string') {\r\n                codeStrings = lastResponse.match(/<[^>]+>/g) || [];\r\n            }\r\n            \r\n            if (codeStrings.length === 0) {\r\n                throw new Error(\"No valid code strings found in response\");\r\n            }\r\n            \r\n            // Create a range that spans all the rows we need\r\n            const targetRange = range.worksheet.getRangeByIndexes(\r\n                startRow,\r\n                startCol,\r\n                codeStrings.length,\r\n                1\r\n            );\r\n            \r\n            // Set all values at once, with each code string in its own row\r\n            targetRange.values = codeStrings.map(str => [str]);\r\n            \r\n            await context.sync();\r\n            console.log(\"Response written to Excel\");\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error writing to Excel:\", error);\r\n        showError(error.message);\r\n    }\r\n}\r\n\r\n// Add this function to append messages to the chat log\r\nfunction appendMessage(content, isUser = false) {\r\n    const chatLog = document.getElementById('chat-log');\r\n    const welcomeMessage = document.getElementById('welcome-message');\r\n    \r\n    // Hide welcome message when first message is added\r\n    if (welcomeMessage) {\r\n        welcomeMessage.style.display = 'none';\r\n    }\r\n    \r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\r\n    \r\n    const messageContent = document.createElement('p');\r\n    messageContent.className = 'message-content';\r\n    messageContent.textContent = content;\r\n    \r\n    messageDiv.appendChild(messageContent);\r\n    chatLog.appendChild(messageDiv);\r\n    \r\n    // Scroll to bottom\r\n    chatLog.scrollTop = chatLog.scrollHeight;\r\n}\r\n\r\n// Modify the handleSend function\r\nasync function handleSend() {\r\n    const userInput = document.getElementById('user-input').value.trim();\r\n    \r\n    if (!userInput) {\r\n        showError('Please enter a request');\r\n        return;\r\n    }\r\n\r\n    // Check if this is a response to a previous message\r\n    isResponse = conversationHistory.length > 0;\r\n\r\n    // Add user message to chat\r\n    appendMessage(userInput, true);\r\n    \r\n    // Clear input\r\n    document.getElementById('user-input').value = '';\r\n\r\n    setButtonLoading(true);\r\n    try {\r\n        // Process the text through the main function\r\n        console.log(\"Starting structureDatabasequeries\");\r\n        const dbResults = await structureDatabasequeries(userInput);\r\n        console.log(\"Database queries completed\");\r\n        \r\n        if (!dbResults || !Array.isArray(dbResults)) {\r\n            console.error(\"Invalid database results:\", dbResults);\r\n            throw new Error(\"Failed to get valid database results\");\r\n        }\r\n        \r\n        // Format the database results into a string\r\n        const plainTextResults = dbResults.map(result => {\r\n            if (!result) return \"No results found\";\r\n            \r\n            return `Query: ${result.query || 'No query'}\\n` +\r\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n                   `---\\n`;\r\n        }).join('\\n');\r\n\r\n        const enhancedPrompt = `Client Request: ${userInput}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n        console.log(\"Enhanced prompt created\");\r\n        console.log(\"Enhanced prompt:\", enhancedPrompt);\r\n\r\n        console.log(\"Starting handleConversation\");\r\n        let response = await handleConversation(enhancedPrompt, isResponse);\r\n        console.log(\"Conversation completed\");\r\n        console.log(\"Initial Response:\", response);\r\n\r\n        if (!response || !Array.isArray(response)) {\r\n            console.error(\"Invalid response:\", response);\r\n            throw new Error(\"Failed to get valid response from conversation\");\r\n        }\r\n\r\n        // Run validation and correction if needed\r\n        console.log(\"Starting validation\");\r\n        const validationResults = await validateCodeStrings(response);\r\n        console.log(\"Validation completed:\", validationResults);\r\n\r\n        if (validationResults && validationResults.length > 0) {\r\n            console.log(\"Starting validation correction\");\r\n            response = await validationCorrection(userInput, response, validationResults);\r\n            console.log(\"Validation correction completed\");\r\n        }\r\n        \r\n        // Store the response for Excel writing\r\n        lastResponse = response;\r\n        \r\n        // Add assistant message to chat\r\n        appendMessage(response.join('\\n'));\r\n        \r\n    } catch (error) {\r\n        console.error(\"Error in handleSend:\", error);\r\n        showError(error.message);\r\n        // Add error message to chat\r\n        appendMessage(`Error: ${error.message}`);\r\n    } finally {\r\n        setButtonLoading(false);\r\n    }\r\n}\r\n\r\n// Add this function to reset the chat\r\nfunction resetChat() {\r\n    // Clear the chat log\r\n    const chatLog = document.getElementById('chat-log');\r\n    chatLog.innerHTML = '';\r\n    \r\n    // Restore welcome message\r\n    const welcomeMessage = document.createElement('div');\r\n    welcomeMessage.id = 'welcome-message';\r\n    welcomeMessage.className = 'welcome-message';\r\n    const welcomeTitle = document.createElement('h1');\r\n    welcomeTitle.textContent = 'What would you like to model?';\r\n    welcomeMessage.appendChild(welcomeTitle);\r\n    chatLog.appendChild(welcomeMessage);\r\n    \r\n    // Clear the conversation history\r\n    conversationHistory = [];\r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    // Reset the response flag and last response\r\n    isResponse = false;\r\n    lastResponse = null;\r\n    \r\n    // Clear the input field\r\n    document.getElementById('user-input').value = '';\r\n    \r\n    console.log(\"Chat reset completed\");\r\n}\r\n\r\n/**\r\n * Inserts worksheets from a base64-encoded Excel file\r\n */\r\nasync function insertSheetsFromBase64() {\r\n    try {\r\n        // Fetch the Excel file\r\n        const response = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Excel file');\r\n        }\r\n        \r\n        // Convert the response to an ArrayBuffer\r\n        const arrayBuffer = await response.arrayBuffer();\r\n        \r\n        // Convert ArrayBuffer to base64 string in chunks\r\n        const uint8Array = new Uint8Array(arrayBuffer);\r\n        let binaryString = '';\r\n        const chunkSize = 8192; // Process in 8KB chunks\r\n        \r\n        for (let i = 0; i < uint8Array.length; i += chunkSize) {\r\n            const chunk = uint8Array.slice(i, Math.min(i + chunkSize, uint8Array.length));\r\n            binaryString += String.fromCharCode.apply(null, chunk);\r\n        }\r\n        \r\n        const base64String = btoa(binaryString);\r\n        \r\n        // Call the function to insert worksheets\r\n        await handleInsertWorksheetsFromBase64(base64String);\r\n        console.log(\"Worksheets inserted successfully\");\r\n    } catch (error) {\r\n        console.error(\"Error inserting worksheets:\", error);\r\n        showError(error.message);\r\n    }\r\n}\r\n\r\n// Update the Office.onReady callback to remove the JSON-based button handler\r\nOffice.onReady(() => {\r\n    console.log(\"Office.onReady called\");\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    \r\n    // Initialize API keys before doing anything else\r\n    initializeAPIKeys().then(success => {\r\n        if (success) {\r\n            console.log(\"API keys initialized successfully\");\r\n        } else {\r\n            console.error(\"Failed to initialize API keys\");\r\n            showError(\"Failed to initialize API keys. Some features may not work correctly.\");\r\n        }\r\n\r\n        // Add click handler for send button\r\n        const sendButton = document.getElementById(\"send\");\r\n        if (sendButton) {\r\n            sendButton.onclick = () => {\r\n                console.log(\"Send button clicked\");\r\n                handleSend();\r\n            };\r\n            console.log(\"Send button click handler attached\");\r\n        } else {\r\n            console.error(\"Send button not found in DOM\");\r\n        }\r\n\r\n        // Add click handler for insert sheets from base64 button\r\n        const insertSheetsButton = document.getElementById(\"insert-sheets-base64\");\r\n        if (insertSheetsButton) {\r\n            insertSheetsButton.onclick = () => {\r\n                console.log(\"Insert sheets from base64 button clicked\");\r\n                insertSheetsFromBase64();\r\n            };\r\n            console.log(\"Insert sheets from base64 button click handler attached\");\r\n        } else {\r\n            console.error(\"Insert sheets from base64 button not found in DOM\");\r\n        }\r\n\r\n        // Add click handler for write to Excel button\r\n        const writeToExcelButton = document.getElementById(\"write-to-excel\");\r\n        if (writeToExcelButton) {\r\n            writeToExcelButton.onclick = () => {\r\n                console.log(\"Write to Excel button clicked\");\r\n                writeToExcel();\r\n            };\r\n            console.log(\"Write to Excel button click handler attached\");\r\n        } else {\r\n            console.error(\"Write to Excel button not found in DOM\");\r\n        }\r\n\r\n        // Add click handler for reset button\r\n        const resetButton = document.getElementById(\"reset-chat\");\r\n        if (resetButton) {\r\n            resetButton.onclick = () => {\r\n                console.log(\"Reset button clicked\");\r\n                resetChat();\r\n            };\r\n            console.log(\"Reset button click handler attached\");\r\n        } else {\r\n            console.error(\"Reset button not found in DOM\");\r\n        }\r\n\r\n        // Add click handler for test code collection button\r\n        const testCodeCollectionButton = document.getElementById(\"test-code-collection\");\r\n        if (testCodeCollectionButton) {\r\n            testCodeCollectionButton.onclick = () => {\r\n                console.log(\"Test Code Collection button clicked\");\r\n                testCodeCollection();\r\n            };\r\n            console.log(\"Test Code Collection button click handler attached\");\r\n        } else {\r\n            console.error(\"Test Code Collection button not found in DOM\");\r\n        }\r\n    });\r\n});\r\n\r\n// Add the test function for code collection\r\nasync function testCodeCollection() {\r\n    try {\r\n        // Sample input text from ActiveModelCode.txt\r\n        const sampleInput = `<MODEL; beginningmonth=\"Jan 2025\"; timeseries=\"Monthly\">\r\n<TAB; label1=\"Working Capital\">\r\n<BR>\r\n<SUB-EV; row1 = \"AS1|# of Grapefruits Sold|||||100|500|500|500|500|500|\";>\r\n<UNITREV-VR; driver1=\"AS1\"; row1 = \"|Revenue|||||||||||\"; row2 = \"LRA1|Grapefruits|||||F|F|F|F|F|F|\";>\r\n<UNITEXP-VR; driver1=\"AS1\"; row1 = \"|Expenses|||||||||||\"; row2 = \"LX1|COGS|||||10|10|10|10|10|10|\">\r\n<TAB; label1=\"Tab 2\">\r\n<BR>\r\n<SUB-EV; row1 = \"AS1|# of Grapefruits Sold|||||100|500|500|500|500|500|\";>\r\n<UNITREV-VR; driver1=\"AS1\"; row1 = \"|Revenue|||||||||||\"; row2 = \"LRA1|Grapefruits|||||F|F|F|F|F|F|\";>\r\n<UNITEXP-VR; driver1=\"AS1\"; row1 = \"|Expenses|||||||||||\"; row2 = \"LX1|COGS|||||10|10|10|10|10|10|\"> \r\n\r\n`;\r\n\r\n        // Process the input text\r\n        const codeCollection = populateCodeCollection(sampleInput);\r\n        \r\n        // Generate the text representation\r\n        const resultText = exportCodeCollectionToText(codeCollection);\r\n        \r\n        // Display the results\r\n        let resultHtml = '<div class=\"test-results\">';\r\n        resultHtml += '<h3>Code Collection Test Results</h3>';\r\n        resultHtml += '<pre>' + resultText + '</pre>';\r\n        resultHtml += '</div>';\r\n        \r\n        // Append the results to the chat log\r\n        appendMessage(resultHtml, false);\r\n        \r\n    } catch (error) {\r\n        console.error(\"Error testing code collection:\", error);\r\n        showError(\"Error testing code collection: \" + error.message);\r\n    }\r\n}\r\n\r\n\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/ChatGPT Image Apr 2, 2025, 10_34_50 PM.png\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js\\\"><\" + \"/script> <link rel=\\\"stylesheet noopener\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-Fabric\\\"> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" rel=\\\"noopener\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <div class=\\\"logo-container\\\"> <img src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"Projectify.AI Logo\\\" class=\\\"logo-image\\\"> </div> <div id=\\\"chat-log\\\" class=\\\"chat-log\\\"> <div id=\\\"welcome-message\\\" class=\\\"welcome-message\\\"> <h1>What would you like to model?</h1> </div> </div> <div class=\\\"chat-input-container\\\"> <textarea id=\\\"user-input\\\" class=\\\"ms-TextField-field\\\" rows=\\\"4\\\" placeholder=\\\"Type your request here...\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"send\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Send</span> </button> <button id=\\\"insert-sheets-base64\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Insert Sheets from Base64</span> </button> <button id=\\\"write-to-excel\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Write to Excel</span> </button> <button id=\\\"reset-chat\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Reset Chat</span> </button> <button id=\\\"test-code-collection\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Test Code Collection</span> </button> </div> <div id=\\\"loading-animation\\\" class=\\\"loading-animation\\\" style=\\\"display:none\\\"> <div class=\\\"spinner\\\"></div> <div class=\\\"loading-text\\\">Processing...</div> </div> </div> <div id=\\\"response-area\\\" class=\\\"response-area\\\"></div> </main> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","defineProperty","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","toString","asyncGeneratorStep","validateCodeStrings","_x","_validateCodeStrings","apply","arguments","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","vvCodes","vrCodes","rrCodes","rvCodes","evCodes","erCodes","validCodes","response","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_i","_arr","code","_i2","_arr2","_code","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","Set","map","str","match","console","log","fetch","ok","text","split","line","trim","filter","t0","concat","message","startsWith","endsWith","parts","part","trimmedPart","afterAsterisk","substring","add","t1","size","has","rowContent","t2","driverValue","err","join","_next","_throw","_asyncToGenerator","handleInsertWorksheetsFromBase64","_handleInsertWorksheetsFromBase","_callee2","base64String","sheetNames","_args2","_context2","Excel","run","_ref","context","workbook","insertWorksheetsFromBase64","sync","error","_x2","populateCodeCollection","inputText","codeCollection","paramsString","params","matchAll","paramName","paramValue","exportCodeCollectionToText","result","index","_Object$entries","entries","_Object$entries$_i","key","API_KEYS","performance","now","OPENAI_API_KEY","PINECONE_API_KEY","srcPaths","_initializeAPIKeys","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","warn","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT4O","conversationHistory","saveConversationHistory","history","localStorage","setItem","JSON","stringify","loadConversationHistory","getItem","parsedHistory","parse","callOpenAI","_callOpenAI","_callee3","messages","model","temperature","errorData","data","_args3","_context3","headers","body","json","status","statusText","choices","content","createEmbedding","_createEmbedding","_callee4","_context4","input","embedding","loadPromptFromFile","_x3","_loadPromptFromFile","_callee5","promptKey","paths","_paths","path","_context5","getSystemPromptFromFile","prompt","_x4","processPrompt","_x5","_processPrompt","_callee6","_ref2","userInput","systemPrompt","_ref2$history","responseContent","parsed","_context6","role","structureDatabasequeries","_x6","_structureDatabasequeries","_callee7","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","_context7","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","t3","t4","query","trainingData","call2Context","call1Context","codeOptions","t5","t6","t7","_x7","_queryVectorDB","_callee8","_ref3","_ref3$indexName","_ref3$numResults","_ref3$similarityThres","indexConfig","url","errorText","matches","matchesDescription","cleanMatches","_context8","vector","topK","includeMetadata","namespace","score","metadata","_objectSpread","toFixed","extractTextFromJson","jsonInput","jsonData","item","safeJsonForPrompt","jsonString","handleFollowUpConversation","_x8","_handleFollowUpConversation","_callee9","trainingdataCall2","followUpPrompt","_context9","MainPrompt","savePromptAnalysis","saveTrainingData","handleInitialConversation","handleConversation","_x9","_handleConversation","_callee10","isFollowUp","_args10","_context10","_x10","_handleInitialConversation","_callee11","Call2prompt","outputArray2","_context11","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","mainPrompt","cleanText","validationCorrection","_x11","_x12","_x13","_validationCorrection","_callee12","initialResponse","codeDescriptions","lastCallContext","responseString","correctionPrompt","correctedResponse","_context12","String","stack","showError","errorDiv","createElement","style","color","padding","margin","border","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","setTimeout","remove","setButtonLoading","isLoading","sendButton","loadingAnimation","disabled","display","lastResponse","isResponse","_writeToExcel","_callee14","_context14","_ref4","_callee13","range","startRow","startCol","codeStrings","fullText","_context13","getSelectedRange","load","rowIndex","columnIndex","worksheet","getRangeByIndexes","_x14","appendMessage","isUser","chatLog","welcomeMessage","messageDiv","className","messageContent","appendChild","scrollTop","scrollHeight","_handleSend","_callee15","dbResults","plainTextResults","enhancedPrompt","_context15","_insertSheetsFromBase","_callee16","arrayBuffer","uint8Array","binaryString","chunk","_context16","Uint8Array","Math","min","fromCharCode","btoa","_testCodeCollection","_callee17","resultText","resultHtml","_context17","Office","onReady","initializeAPIKeys","success","onclick","handleSend","insertSheetsButton","insertSheetsFromBase64","writeToExcelButton","writeToExcel","resetButton","innerHTML","id","welcomeTitle","resetChat","testCodeCollectionButton","testCodeCollection","URL"],"sourceRoot":""}