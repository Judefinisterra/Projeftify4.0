{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Track codes by their suffixes\r\n    const vvCodes = new Set();  // codes ending in -VV\r\n    const vrCodes = new Set();  // codes ending in -VR\r\n    const rrCodes = new Set();  // codes ending in -RR\r\n    const rvCodes = new Set();  // codes ending in -RV\r\n    const evCodes = new Set();  // codes ending in -EV\r\n    const erCodes = new Set();  // codes ending in -ER\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    const rowId = parts[0].trim();\r\n                    if (rowId) {\r\n                        rowValues.add(rowId);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n\r\n            // Check for suffixes and store them\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships\r\n    // Rule 1: -VV or -VR must have -EV or -RV\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n\r\n    // Rule 2: -RR or -RV must have -ER or -VR\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n// Second pass: detailed validation\r\nfor (const codeString of inputCodeStrings) {\r\n    // Skip BR tags completely\r\n    if (codeString === '<BR>') {\r\n        continue;\r\n    }\r\n    \r\n    const codeMatch = codeString.match(/<([^;]+);/);\r\n    if (!codeMatch) {\r\n        errors.push(`Cannot extract code type from: ${codeString}`);\r\n        continue;\r\n    }\r\n\r\n    const codeType = codeMatch[1].trim();\r\n    \r\n    // Validate code exists in description file\r\n    if (!validCodes.has(codeType)) {\r\n        errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n    }\r\n\r\n\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                // console.log(driverValue);\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return errors;\r\n} // <-- This is the end of the validateCodeStrings function\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n// Add this test function\r\nimport { validateCodeStrings } from './Validation.js';\r\n// Mock fs module for browser environment\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true; \r\n\r\n// API keys storage\r\nlet API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\nconst srcPaths = [\r\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\r\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\r\n  'https://localhost:3002/src/prompts/Followup_System.txt',\r\n  'https://localhost:3002/src/prompts/Structure_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\r\n];\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nasync function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys...\");\r\n    \r\n    // Try to load config.js which is .gitignored\r\n    try {\r\n      const configResponse = await fetch('https://localhost:3002/config.js');\r\n      if (configResponse.ok) {\r\n        const configText = await configResponse.text();\r\n        // Extract keys from the config text using regex\r\n        const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        \r\n        if (openaiKeyMatch && openaiKeyMatch[1]) {\r\n          API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n          console.log(\"OpenAI API key loaded from config.js\");\r\n        }\r\n        \r\n        if (pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n          API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n          console.log(\"Pinecone API key loaded from config.js\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Could not load config.js, will use empty API keys:\", error);\r\n    }\r\n    \r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"OPENAI_API_KEY:\", API_KEYS.OPENAI_API_KEY ? \r\n      `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${API_KEYS.OPENAI_API_KEY.substring(API_KEYS.OPENAI_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    console.log(\"PINECONE_API_KEY:\", API_KEYS.PINECONE_API_KEY ? \r\n      `${API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${API_KEYS.PINECONE_API_KEY.substring(API_KEYS.PINECONE_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    \r\n    return API_KEYS.OPENAI_API_KEY && API_KEYS.PINECONE_API_KEY;\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Update Pinecone configuration to handle multiple indexes\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\r\n\r\n// Define configurations for each index\r\nconst PINECONE_INDEXES = {\r\n    codes: {\r\n        name: \"codes\",\r\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2trainingdata: {\r\n        name: \"call2trainingdata\",\r\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2context: {\r\n        name: \"call2context\",\r\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call1context: {\r\n        name: \"call1context\",\r\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    }\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history\r\nfunction saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nfunction loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n            \r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n            \r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function (replaces LangChain)\r\nasync function callOpenAI(messages, model = GPT4O, temperature = 0.7) {\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}`);\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI API response received\");\r\n    \r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function (replaces LangChain)\r\nasync function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n    \r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Remove the PROMPTS object and add a function to load prompts\r\nasync function loadPromptFromFile(promptKey) {\r\n  try {\r\n    // Use a simplified path approach that works with dev server with correct port\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n    ];\r\n    \r\n    // Combine all paths to try\r\n    paths.push(...srcPaths);\r\n \r\n    // Try each path until one works\r\n    let response = null;\r\n    for (const path of paths) {\r\n      console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n    \r\n    if (!response || !response.ok) {\r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n    \r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    throw error; // Re-throw the error to be handled by the caller\r\n  }\r\n}\r\n\r\n// Update the getSystemPromptFromFile function\r\nconst getSystemPromptFromFile = async (promptKey) => {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n//************Functions************\r\n// Function 1: OpenAI Call with conversation history support\r\nasync function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    console.log(\"API Key being used:\", API_KEYS.OPENAI_API_KEY ? `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n    \r\n    // Format messages in the way OpenAI expects\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n    \r\n    // Add conversation history\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            messages.push({ \r\n                role: message[0] === \"human\" ? \"user\" : \"assistant\", \r\n                content: message[1] \r\n            });\r\n        });\r\n    }\r\n    \r\n    // Add current user input\r\n    messages.push({ role: \"user\", content: userInput });\r\n    \r\n    try {\r\n        // Call OpenAI API directly\r\n        const responseContent = await callOpenAI(messages, model, temperature);\r\n        \r\n        // Try to parse JSON response if applicable\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            // If not JSON, treat as text and split by lines\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nasync function structureDatabasequeries(clientprompt) {\r\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n  try {\r\n      console.log(\"Getting structure system prompt\");\r\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n      \r\n      if (!systemStructurePrompt) {\r\n          throw new Error(\"Failed to load structure system prompt\");\r\n      }\r\n\r\n      console.log(\"Got system prompt, processing query strings\");\r\n      const queryStrings = await processPrompt({\r\n          userInput: clientprompt,\r\n          systemPrompt: systemStructurePrompt,\r\n          model: GPT4O,\r\n          temperature: 1\r\n      });\r\n\r\n      if (!queryStrings || !Array.isArray(queryStrings)) {\r\n          throw new Error(\"Failed to get valid query strings\");\r\n      }\r\n\r\n      console.log(\"Got query strings:\", queryStrings);\r\n      const results = [];\r\n\r\n      for (const queryString of queryStrings) {\r\n          console.log(\"Processing query:\", queryString);\r\n          try {\r\n              const queryResults = {\r\n                  query: queryString,\r\n                  trainingData: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2trainingdata',\r\n                      numResults: 3\r\n                  }),\r\n                  call2Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2context',\r\n                      numResults: 5\r\n                  }),\r\n                  call1Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call1context',\r\n                      numResults: 5\r\n                  }),\r\n                  codeOptions: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      indexName: 'codes',\r\n                      numResults: 3,\r\n                      similarityThreshold: .1\r\n                  })\r\n              };\r\n\r\n              results.push(queryResults);\r\n              console.log(\"Successfully processed query:\", queryString);\r\n          } catch (error) {\r\n              console.error(`Error processing query \"${queryString}\":`, error);\r\n              // Continue with next query instead of failing completely\r\n              continue;\r\n          }\r\n      }\r\n\r\n      if (results.length === 0) {\r\n          throw new Error(\"No valid results were obtained from any queries\");\r\n      }\r\n\r\n      return results;\r\n  } catch (error) {\r\n      console.error(\"Error in structureDatabasequeries:\", error);\r\n      throw error;\r\n  }\r\n}\r\n\r\n// Function 3: Query Vector Database using Pinecone REST API\r\nasync function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        console.log(\"Generating embeddings for query:\", queryPrompt);\r\n        \r\n        // Generate embeddings using our direct API call\r\n        const embedding = await createEmbedding(queryPrompt);\r\n        console.log(\"Embeddings generated successfully\");\r\n        \r\n        // Get the correct endpoint for the specified index\r\n        const indexConfig = PINECONE_INDEXES[indexName];\r\n        if (!indexConfig) {\r\n            throw new Error(`Invalid index name: ${indexName}`);\r\n        }\r\n        \r\n        const url = `${indexConfig.apiEndpoint}/query`;\r\n        console.log(\"Making Pinecone API request to:\", url);\r\n        \r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': API_KEYS.PINECONE_API_KEY,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\"\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Pinecone API response received\");\r\n        \r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        matches = matches.slice(0, numResults);\r\n\r\n        matches = matches.map(match => {\r\n            try {\r\n                if (match.metadata && match.metadata.text) {\r\n                    return {\r\n                        ...match,\r\n                        text: match.metadata.text\r\n                    };\r\n                }\r\n                return match;\r\n            } catch (error) {\r\n                console.error(\"Error processing match:\", error);\r\n                return match;\r\n            }\r\n        });\r\n\r\n        if (DEBUG) {\r\n            const matchesDescription = matches\r\n                .map((match, i) => `Match ${i + 1} (score: ${match.score.toFixed(4)}): ${match.text || JSON.stringify(match.metadata)}`)\r\n                .join('\\n');\r\n            console.log(matchesDescription);\r\n        }\r\n\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match));\r\n        return cleanMatches.filter(text => text !== \"\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error during vector database query:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n       \r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item.metadata && item.metadata.text) {\r\n                   return item.metadata.text;\r\n               }\r\n           }\r\n           throw new Error(\"No text field found in the JSON array\");\r\n       } \r\n       else if (jsonData.metadata && jsonData.metadata.text) {\r\n           return jsonData.metadata.text;\r\n       } \r\n       else {\r\n           throw new Error(\"Invalid JSON structure: missing metadata.text field\");\r\n       }\r\n   } catch (error) {\r\n       console.error(`Error processing JSON: ${error.message}`);\r\n       return \"\";\r\n   }\r\n}\r\n\r\nfunction safeJsonForPrompt(obj, readable = true) {\r\n    if (!readable) {\r\n        let jsonString = JSON.stringify(obj);\r\n        jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '');\r\n        return jsonString\r\n            .replace(/{/g, '\\\\u007B')\r\n            .replace(/}/g, '\\\\u007D');\r\n    }\r\n    \r\n    if (Array.isArray(obj)) {\r\n        return obj.map(item => {\r\n            if (item.metadata && item.metadata.text) {\r\n                const text = item.metadata.text.replace(/~/g, ',');\r\n                const parts = text.split(';');\r\n                \r\n                let result = '';\r\n                if (parts.length >= 1) result += parts[0].trim();\r\n                if (parts.length >= 2) result += '\\n' + parts[1].trim();\r\n                if (parts.length >= 3) result += '\\n' + parts[2].trim();\r\n                \r\n                if (item.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                \r\n                return result;\r\n            }\r\n            return JSON.stringify(item).replace(/~/g, ',');\r\n        }).join('\\n\\n');\r\n    }\r\n    \r\n    const jsonString = JSON.stringify(obj, null, 2).replace(/~/g, ',');\r\n    return jsonString\r\n        .replace(/{/g, '\\\\u007B')\r\n        .replace(/}/g, '\\\\u007D');\r\n}\r\n\r\nasync function handleFollowUpConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing follow-up question. Loading conversation history...\");\r\n    conversationHistory = loadConversationHistory();\r\n    \r\n    if (conversationHistory.length > 0) {\r\n        if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n        if (DEBUG) console.log(\"Loaded conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n        const MainPrompt = await getSystemPromptFromFile('main');\r\n        \r\n        const trainingdataCall2 = await queryVectorDB({\r\n            queryPrompt: clientprompt,\r\n            similarityThreshold: .4,\r\n            indexName: 'call2trainingdata',\r\n            numResults: 3\r\n        });\r\n\r\n        const call2context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call2context',\r\n            numResults: 5\r\n        });\r\n\r\n        const call1context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call1context',\r\n            numResults: 5\r\n        });\r\n\r\n        const codeOptions = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2 + call1context,\r\n            indexName: 'codes',\r\n            numResults: 10,\r\n            similarityThreshold: .1\r\n        });\r\n        \r\n        const followUpPrompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt + \"\\n\" +\r\n                       \"Training Data: \" + safeJsonForPrompt(trainingdataCall2).replace(/~/g, ',') + \"\\n\" +\r\n                       \"Code choosing context: \" + safeJsonForPrompt(call1context) + \"\\n\" +\r\n                       \"Code editing Context: \" + safeJsonForPrompt(call2context) + \"\\n\" +\r\n                       \"Code descriptions: \" + safeJsonForPrompt(codeOptions);\r\n        \r\n        const response = await processPrompt({\r\n            userInput: followUpPrompt,\r\n            systemPrompt: systemPrompt,\r\n            model: GPT4O,\r\n            temperature: 1,\r\n            history: conversationHistory\r\n        });\r\n        \r\n        conversationHistory.push([\"human\", clientprompt]);\r\n        conversationHistory.push([\"assistant\", response.join(\"\\n\")]);\r\n        \r\n        saveConversationHistory(conversationHistory);\r\n        \r\n        if (DEBUG) console.log(\"Updated conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, call2context, call1context, trainingdataCall2, codeOptions, response);\r\n        saveTrainingData(clientprompt, response);\r\n        \r\n        return response;\r\n    } else {\r\n        if (DEBUG) console.log(\"No conversation history found. Treating as initial question.\");\r\n        return handleInitialConversation(clientprompt);\r\n    }\r\n}\r\n\r\nasync function handleConversation(clientprompt, isFollowUp = false) {\r\n    try {\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        return [\"Error processing your request: \" + error.message];\r\n    }\r\n}\r\n\r\nasync function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n    \r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    console.log(\"SYSTEM PROMPT: \", systemPrompt);\r\n    const MainPrompt = await getSystemPromptFromFile('Encoder_Main');\r\n    console.log(\"MAIN PROMPT: \", MainPrompt);\r\n\r\n\r\n    const Call2prompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt;\r\n    \r\n    const outputArray2 = await processPrompt({\r\n        userInput: Call2prompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT4O,\r\n        temperature: 1 \r\n    });\r\n    \r\n    conversationHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray2.join(\"\\n\")]\r\n    ];\r\n    \r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, [], [], [], [], outputArray2);\r\n    saveTrainingData(clientprompt, outputArray2);\r\n    \r\n    return outputArray2;\r\n}\r\n\r\n\r\n\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray2) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt,\r\n            systemPrompt,\r\n            mainPrompt: MainPrompt,\r\n            validationSystemPrompt,\r\n            validationMainPrompt,\r\n            validationResults,\r\n            call2context,\r\n            call1context,\r\n            trainingdataCall2,\r\n            codeOptions,\r\n            outputArray2\r\n        };\r\n        \r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\nfunction saveTrainingData(clientprompt, outputArray2) {\r\n    try {\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            return text.toString()\r\n                .replace(/\\r?\\n|\\r/g, ' ')\r\n                .trim();\r\n        }\r\n        \r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            response: cleanText(JSON.stringify(outputArray2))\r\n        };\r\n        \r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\nasync function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n        const conversationHistory = loadConversationHistory();\r\n        \r\n        const trainingData = localStorage.getItem('trainingData') || \"\";\r\n        const codeDescriptions = localStorage.getItem('codeDescriptions') || \"\";\r\n        const lastCallContext = localStorage.getItem('lastCallContext') || \"\";\r\n        \r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n        \r\n        if (!validationSystemPrompt) {\r\n            throw new Error(\"Failed to load validation system prompt\");\r\n        }\r\n        \r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        \r\n        const correctionPrompt = \r\n            \"Main Prompt: \" + validationMainPrompt + \"\\n\\n\" +\r\n            \"Original User Input: \" + clientprompt + \"\\n\\n\" +\r\n            \"Initial Response: \" + responseString + \"\\n\\n\" +\r\n            \"Validation Results: \" + validationResults + \"\\n\\n\" +\r\n            \"Training Data: \" + trainingData + \"\\n\\n\" +\r\n            \"Code Descriptions: \" + codeDescriptions + \"\\n\\n\" +\r\n            \"Context from Last Call: \" + lastCallContext;\r\n        \r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(correctionPrompt.substring(0, 500) + \"...(truncated)\");\r\n            console.log(\"=========================================\");\r\n        }\r\n        \r\n        const correctedResponse = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT4O,\r\n            temperature: 0.7\r\n        });\r\n        \r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        fs.writeFileSync(correctionOutputPath, Array.isArray(correctedResponse) ? correctedResponse.join(\"\\n\") : correctedResponse);\r\n        \r\n        if (DEBUG) console.log(`Validation correction saved to ${correctionOutputPath}`);\r\n        \r\n        return correctedResponse;\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        console.error(error.stack);\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showError(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.color = 'red';\r\n    errorDiv.style.padding = '10px';\r\n    errorDiv.style.margin = '10px';\r\n    errorDiv.style.border = '1px solid red';\r\n    errorDiv.style.borderRadius = '4px';\r\n    errorDiv.textContent = `Error: ${message}`;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(errorDiv, appBody.firstChild);\r\n    \r\n    // Remove the error message after 5 seconds\r\n    setTimeout(() => {\r\n        errorDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction setButtonLoading(isLoading) {\r\n    const runButton = document.getElementById('run');\r\n    if (runButton) {\r\n        if (isLoading) {\r\n            runButton.disabled = true;\r\n            runButton.innerHTML = '<span class=\"ms-Button-label\">Processing...</span>';\r\n        } else {\r\n            runButton.disabled = false;\r\n            runButton.innerHTML = '<span class=\"ms-Button-label\">Run</span>';\r\n        }\r\n    }\r\n}\r\n\r\n// Move the run function declaration to module level\r\nexport async function run() {\r\n  console.log(\"Run function started\");\r\n  setButtonLoading(true);\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      console.log(\"Excel.run started\");\r\n      const range = context.workbook.getSelectedRange();\r\n      range.load(\"address\");\r\n      range.load(\"values\");\r\n      await context.sync();\r\n      \r\n      console.log(\"Selected range:\", range.address);\r\n      const selectedText = range.values[0][0];\r\n      console.log(\"Selected text:\", selectedText);\r\n      \r\n      if (!selectedText) {\r\n        throw new Error(\"No text selected in the range\");\r\n      }\r\n      \r\n      // Process the text through the main function\r\n      console.log(\"Starting structureDatabasequeries\");\r\n      const dbResults = await structureDatabasequeries(selectedText);\r\n      console.log(\"Database queries completed\");\r\n      \r\n      if (!dbResults || !Array.isArray(dbResults)) {\r\n        console.error(\"Invalid database results:\", dbResults);\r\n        throw new Error(\"Failed to get valid database results\");\r\n      }\r\n      \r\n      // Format the database results into a string\r\n      const plainTextResults = dbResults.map(result => {\r\n        if (!result) {\r\n          console.error(\"Invalid result in dbResults:\", result);\r\n          return \"No results found\";\r\n        }\r\n        \r\n        return `Query: ${result.query || 'No query'}\\n` +\r\n               `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n               `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n               `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n               `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n               `---\\n`;\r\n      }).join('\\n');\r\n\r\n      // Create an enhanced prompt that includes the database results\r\n      const enhancedPrompt = `Client Request: ${selectedText}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n      console.log(\"Enhanced prompt created\");\r\n\r\n      // Process the conversation with the enhanced prompt\r\n      console.log(\"Starting handleConversation\");\r\n      const response = await handleConversation(enhancedPrompt, false);\r\n      console.log(\"Conversation completed\");\r\n\r\n      if (!response || !Array.isArray(response)) {\r\n        console.error(\"Invalid response:\", response);\r\n        throw new Error(\"Failed to get valid response from conversation\");\r\n      }\r\n\r\n      // Run validation and correction\r\n      console.log(\"Starting validation\");\r\n      const validationResults = await validateCodeStrings(response);\r\n      console.log(\"Validation completed:\", validationResults);\r\n\r\n      let finalResponse;\r\n      if (validationResults && validationResults.includes(\"Validation successful - no errors found\")) {\r\n        finalResponse = response;\r\n      } else {\r\n        console.log(\"Starting validation correction\");\r\n        finalResponse = await validationCorrection(selectedText, response, validationResults);\r\n        console.log(\"Validation correction completed\");\r\n      }\r\n      \r\n      if (!finalResponse || !Array.isArray(finalResponse)) {\r\n        console.error(\"Invalid final response:\", finalResponse);\r\n        throw new Error(\"Failed to get valid final response\");\r\n      }\r\n      \r\n      // Write the final response back to Excel\r\n      console.log(\"Writing response to Excel\");\r\n      range.values = [[finalResponse.join('\\n')]];\r\n      await context.sync();\r\n      console.log(\"Response written to Excel\");\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in run function:\", error);\r\n    console.error(\"Error stack:\", error.stack);\r\n    showError(error.message);\r\n  } finally {\r\n    setButtonLoading(false);\r\n  }\r\n}\r\n\r\n// Update the Office.onReady callback to reference the run function\r\nOffice.onReady(() => {\r\n  console.log(\"Office.onReady called\");\r\n  document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n  document.getElementById(\"app-body\").style.display = \"flex\";\r\n  \r\n  // Initialize API keys before doing anything else\r\n  initializeAPIKeys().then(success => {\r\n    if (success) {\r\n      console.log(\"API keys initialized successfully\");\r\n    } else {\r\n      console.error(\"Failed to initialize API keys\");\r\n      showError(\"Failed to initialize API keys. Some features may not work correctly.\");\r\n    }\r\n\r\n    // Add click handler with visual feedback\r\n    const runButton = document.getElementById(\"run\");\r\n    if (runButton) {\r\n      runButton.onclick = () => {\r\n        console.log(\"Run button clicked\");\r\n        runButton.style.backgroundColor = \"#0078d4\"; // Visual feedback\r\n        setTimeout(() => {\r\n          runButton.style.backgroundColor = \"\"; // Reset color\r\n        }, 200);\r\n        run();\r\n      };\r\n      console.log(\"Run button click handler attached\");\r\n    } else {\r\n      console.error(\"Run button not found in DOM\");\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\nasync function testValidation() {\r\n    // Test cases\r\n    const testCases = [\r\n        // Valid case\r\n        [\r\n            '<TAB; label1=\"Test Tab\">',\r\n            '<CODE-VV; row1=\"123|Description\">',\r\n            '<CODE-EV; row2=\"456|Another Description\">'\r\n        ],\r\n        // Invalid case (missing EV/RV code)\r\n        [\r\n            '<TAB; label1=\"Test Tab\">',\r\n            '<CODE-VV; row1=\"123|Description\">'\r\n        ],\r\n        // Invalid format case\r\n        [\r\n            '<INVALID; row1=\"123\">'\r\n        ]\r\n    ];\r\n\r\n    console.log(\"Starting validation tests...\");\r\n\r\n    for (let i = 0; i < testCases.length; i++) {\r\n        console.log(`\\nTest Case ${i + 1}:`);\r\n        console.log(\"Input:\", testCases[i]);\r\n        \r\n        const errors = await validateCodeStrings(testCases[i]);\r\n        \r\n        if (errors && errors.length > 0) {\r\n            console.log(\"Validation Errors:\");\r\n            errors.forEach(error => console.log(`- ${error}`));\r\n        } else {\r\n            console.log(\"Validation Successful - No errors\");\r\n        }\r\n    }\r\n}\r\n\r\n// Add this to your Office.onReady handler if not already present\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Excel) {\r\n        document.getElementById(\"run-test\").onclick = testValidation;\r\n    }\r\n});\r\n\r\n\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su\\\">Welcome</h1> </header> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <h2 class=\\\"ms-font-xl\\\"> Discover what Office Add-ins can do for you today! </h2> <ul class=\\\"ms-List ms-welcome__features\\\"> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Ribbon ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Achieve more with Office integration</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Unlock ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Unlock features and functionality</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Design ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Create and visualize like a pro</span> </li> </ul> <p class=\\\"ms-font-l\\\">Modify the source files, then click <b>Run</b>.</p> <div role=\\\"button\\\" id=\\\"run\\\" class=\\\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\\\"> <span class=\\\"ms-Button-label\\\">Run</span> </div> <button class=\\\"ms-Button\\\" id=\\\"run-test\\\"> <span class=\\\"ms-Button-label\\\">Test Validation</span> </button> <p><label id=\\\"item-subject\\\"></label></p> </main> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","defineProperty","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","toString","asyncGeneratorStep","validateCodeStrings","_x","_validateCodeStrings","apply","arguments","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","vvCodes","vrCodes","rrCodes","rvCodes","evCodes","erCodes","validCodes","response","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_i","_arr","code","_i2","_arr2","_code","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","Set","fetch","ok","text","split","map","line","trim","filter","t0","concat","message","startsWith","endsWith","match","parts","rowId","add","t1","size","has","rowContent","t2","driverValue","err","_next","_throw","_asyncToGenerator","API_KEYS","performance","now","OPENAI_API_KEY","PINECONE_API_KEY","srcPaths","_initializeAPIKeys","_callee2","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","_context2","console","log","warn","substring","error","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT4O","conversationHistory","saveConversationHistory","history","localStorage","setItem","JSON","stringify","loadConversationHistory","getItem","parsedHistory","parse","callOpenAI","_callOpenAI","_callee3","messages","model","temperature","errorData","data","_args3","_context3","headers","body","json","status","statusText","choices","content","createEmbedding","_x2","_createEmbedding","_callee4","_context4","input","embedding","loadPromptFromFile","_x3","_loadPromptFromFile","_callee5","promptKey","paths","_paths","path","_context5","getSystemPromptFromFile","_ref","prompt","_x4","processPrompt","_x5","_processPrompt","_callee6","_ref2","userInput","systemPrompt","_ref2$history","responseContent","parsed","_context6","role","structureDatabasequeries","_x6","_structureDatabasequeries","_callee7","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","_context7","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","t3","t4","query","trainingData","call2Context","call1Context","codeOptions","t5","t6","t7","_x7","_queryVectorDB","_callee8","_ref3","_ref3$indexName","_ref3$numResults","_ref3$similarityThres","indexConfig","url","errorText","matches","matchesDescription","cleanMatches","_context8","vector","topK","includeMetadata","namespace","score","metadata","_objectSpread","toFixed","join","extractTextFromJson","jsonInput","jsonData","item","safeJsonForPrompt","jsonString","result","handleFollowUpConversation","_x8","_handleFollowUpConversation","_callee9","MainPrompt","trainingdataCall2","followUpPrompt","_context9","savePromptAnalysis","saveTrainingData","handleInitialConversation","handleConversation","_x9","_handleConversation","_callee10","isFollowUp","_args10","_context10","_x10","_handleInitialConversation","_callee11","Call2prompt","outputArray2","_context11","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","mainPrompt","cleanText","validationCorrection","_x11","_x12","_x13","_validationCorrection","_callee12","initialResponse","codeDescriptions","lastCallContext","responseString","correctionPrompt","correctedResponse","_context12","String","stack","showError","errorDiv","createElement","style","color","padding","margin","border","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","setTimeout","remove","setButtonLoading","isLoading","runButton","disabled","innerHTML","_run","_callee14","_context14","Excel","run","_ref4","_callee13","context","range","selectedText","dbResults","plainTextResults","enhancedPrompt","finalResponse","_context13","workbook","getSelectedRange","load","sync","address","includes","_x14","testValidation","_testValidation","_callee15","testCases","_context15","Office","onReady","display","initializeAPIKeys","success","onclick","backgroundColor","info","host","HostType","URL"],"sourceRoot":""}